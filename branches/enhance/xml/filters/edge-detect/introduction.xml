<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                       "http://www.docbook.org/xml/4.3/docbookx.dtd">
<!-- section history:
  2007-08-17 Added Spanish translation by AntI
  2007-04-09 KoSt: added 'no'
  2005-08-29 de added by axel.wernicke
-->
<!--2009-07-29-->
<sect2 id="filters-edges-introduction">
  <title lang="en">Introduction</title>
  <title lang="ja">あらまし</title>

  <indexterm lang="en">
    <primary>Filters</primary>
    <secondary>Edge Detect</secondary>
    <tertiary>Introduction</tertiary>
  </indexterm>
  <indexterm lang="en">
    <primary>Edge-Detect</primary>
  </indexterm>
  <indexterm lang="ja">
    <primary>フィルタ</primary>
    <secondary sortas="リンカクチュウシュツ">輪郭抽出</secondary>
    <tertiary sortas="アラマシ">あらまし</tertiary>
  </indexterm>
  <indexterm lang="ja">
    <primary sortas="リンカクチュウシュツ">輪郭抽出</primary>
  </indexterm>

  <para lang="en">
    Edge detect filters search for borders between different colors
    and so can detect contours of objects.
  </para>
  <para lang="en">
    They are used to make selections and for many artistic purposes.
  </para>
  <para lang="ja">
    輪郭抽出フィルタは色の変わる境目を探って画像に描かれた物体の輪郭を読み取り
    ます。
  </para>
  <para lang="ja">
    この機能をもつフィルタは選択範囲の作成や数々の美術的目的に使われています。
  </para>
  <mediaobject>
    <imageobject>
      <imagedata format="PNG"
        fileref="images/filters/filters-edgedetect-fig.png"/>
    </imageobject>
  </mediaobject>
  <para lang="en">
    Most of them are based on gradient calculation methods and give thick
    border lines. Look at fig.1 which represents color intensity
    variations. On the left is a slow color gradient which is not a border.
    On the right is a quick variation which is an edge. Now, let us
    calculate the gradient, the variation speed, of this edge, i.e the first
    derivative (fig.2). We have to decide that a border is detected when
    gradient is more than a threshold value (the exact border is at top of
    the curve, but this top varies according to borders). In most cases,
    threshold is under top and border is thick.
  </para>
  <para lang="en">
    The Laplacian edge detection uses the second derivative (fig.3).
    The top of the curve is now at zero and clearly identified. That's
    why Laplace filter renders a thin border, only a pixel wide. But
    this derivative gives several zeros corresponding to small
    ripples, resulting in false edges.
  </para>
  <para lang="en">
    Some blurring before applying edge filters is often necessary: it
    flattens small ripples in signal and so prevents false edges.
  </para>
  <para lang="ja">
    ここのほとんどのフィルタは色の変わり方を数値解析する方法をとっており、 
    そこから太い縁取りを導き出します。 図1. は色の値の強弱を表しています。 曲線
    の左側は輪郭ではないので色変わりがゆっくりしています。 右側には輪郭があり
    急激に色変りしています。 さてフィルタはその色変化の速さを計測し導関数を
    得ますがここの輪郭ではどうでしょう (図2.)。 しきい値よりも高い色変化をして
    いるところを輪郭と判断する必要があります (正確な輪郭の位置は曲線の頂点に
    なりますが、 この頂点は輪郭により異なります)。 ほぼ間違いなくしきい値は
    頂点よりも低いところにあり、 輪郭線は太くなります。
  </para>
  <para lang="ja">
    <link linkend="plug-in-laplace">ラプラス</link> フィルタの輪郭抽出には第2次
    導関数 (図3.) を使用します。 曲線の頂点がここでは 0 を指すのではっきりと
    認識できます。 このしくみがあるからラプラスフィルタはたった1ピクセル幅の
    細い輪郭を描くのです。 しかしこの導関数は小さな波にも 0 を指して 0 が
    あちこちできるので、 誤った輪郭を掴むおそれがあります。
  </para>
  <para lang="ja">
    しばしば輪郭抽出フィルタを実行する前に何らかのぼかし処理をかけるのが極めて
    望ましい場合があります。 こうすると小さな波が平坦に沈みますので輪郭のとり
    損ないが防げるからです。
  </para>
</sect2>
