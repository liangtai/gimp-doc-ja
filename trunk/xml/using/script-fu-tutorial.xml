<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                       "http://www.docbook.org/xml/4.3/docbookx.dtd">
<!-- section history:
  2007-06-14 alex falappa: finished italian translation
  2007-04-13 alex falappa: started it translation
  2008-03-12 jpl : french update
-->
<!--2012-03-29-->
<sect1 id="gimp-using-script-fu-tutorial"
 xmlns:xi="http://www.w3.org/2001/XInclude">
  <title lang="en">A Script-Fu Tutorial</title>
  <title lang="ja">Script-Fu 作成演習</title>

  <indexterm lang="en">
    <primary>Script-Fu</primary>
    <secondary>Tutorial</secondary>
  </indexterm>
  <indexterm lang="ja">
    <primary>Script-Fu</primary>
    <secondary sortas="エンシュウ">演習</secondary>
  </indexterm>

  <para lang="en">
    In this training course, we'll introduce you to the fundamentals of Scheme
    necessary to use Script-Fu, and then build a handy script that you can add
    to your toolbox of scripts. The script prompts the user for some text,
    then creates a new image sized perfectly to the text. We will then enhance
    the script to allow for a buffer of space around the text. We will
    conclude with a few suggestions for ways to ramp up your knowledge of
    Script-Fu.
  </para>
  <para lang="ja">
    この訓練過程は Script-Fu を扱う上で必須の Scheme 言語の基礎を身につけ、 
    例題で便利なスクリプトを書いて道具箱に収めるまでを修めていただきます。 
    例題のスクリプトはユーザーに語句の入力を促し、 そのテキストの大きさに
    ぴったり合う画像を新たに作成します。 つづいてテキストまわりに余裕をもたせる
    空隙をつくれるようにスクリプトを改造します。 少しずつ Script-Fu の知識が
    身につくよう、 ここでとりあげる議題は最小限にとどめることにしました。
  </para>
  <note>
    <para lang="en">
      This section as adapted from a tutorial written for the
      <application><acronym>GIMP</acronym> 1</application> User
      Manual by Mike Terry.
    </para>
    <para lang="ja">
      この節は <application><acronym>GIMP</acronym> 1</application> 用の
      ユーザーマニュアルに掲載されたマイク・テリー氏著の演習 (日本語訳は 
      <ulink url="http://www.geocities.jp/gimpfile/gum_jp/43.html">
      マイク・テリーの Script-Fu 黒帯道場</ulink>) を再編成したものです。
    </para>
  </note>

  <sect2 id="gimp-using-script-fu-tutorial-scheme">
    <title lang="en">Getting Acquainted With Scheme</title>
    <title lang="ja">Scheme に精通</title>
    <sect3>
      <title lang="en">Let's Start Scheme'ing</title>
      <title lang="ja">Scheme をはじめよう</title>
      <para lang="en">The first thing to learn is that:</para>
      <para lang="ja">最もはじめに学んでほしいことは、</para>
      <blockquote>
        <para lang="en">
          Every statement in Scheme is surrounded by parentheses ().
        </para>
        <para lang="ja">
          Scheme 言語ではどんな構文も丸括弧 () でくくられること
        </para>
      </blockquote>
      <para lang="en">The second thing you need to know is that:</para>
      <para lang="ja">
        そのつぎに覚えてほしいことは、
        <blockquote>
          <para>
            関数名や演算子は常に括弧内の先頭に置かれ、 つづくパラメーターが
            その関数や演算子に渡されること
          </para>
        </blockquote> です。
      </para>
      <blockquote>
        <para lang="en">
          The function name/operator is always the first item in the
          parentheses, and the rest of the items are parameters to the
          function.
        </para>
        <para lang="ja"><!--no use--></para>
      </blockquote>
      <para lang="en">
        However, not everything enclosed in parentheses is a function &mdash;
        they can also be items in a list &mdash; but we'll get to that later.
        This notation is referred to as prefix notation, because the function
        prefixes everything else. If you're familiar with postfix notation, or
        own a calculator that uses Reverse Polish Notation (such as most HP
        calculators), you should have no problem adapting to formulating
        expressions in Scheme.
      </para>
      <para lang="en">The third thing to understand is that:</para>
      <para lang="ja">
        もちろん括弧でくくられるのは関数だけにとどまりません。 リストと
        呼ばれる一連の項目の羅列も括弧でくくります。 これについてはあとで
        触れます。 Scheme は前置記法の規則にしたがい関数が式の最初に来ます。 
        後置記法に馴染みのある方や<acronym>HP</acronym>社製のほとんどの種類の
        電卓のような逆ポーランド記法の電卓をお持ちの方にとっては Scheme で式を
        書けるようになるのに問題はないはずです。
      </para>
      <para lang="ja">
        3 つ目にご理解いただきたいことは、
        <blockquote>
          <para>
            算数で使われている演算子も関数の一種とみなされており、 数式を
            書くときその最初に置かなくてはならないこと
          </para>
        </blockquote> です。
      </para>
      <blockquote>
        <para lang="en">
          Mathematical operators are also considered functions, and thus are
          listed first when writing mathematical expressions.
        </para>
        <para lang="ja"><!--no use--></para>
      </blockquote>
      <para lang="en">
        This follows logically from the prefix notation that we just
        mentioned.
      </para>
      <para lang="ja">
        こちらの規則は前置記法の考え方がわかればすんなり理解できると思います。
      </para>
    </sect3>

    <sect3>
      <title lang="en">
        Examples Of Prefix, Infix, And Postfix Notations
      </title>
      <title lang="ja">前置記法と中置記法と後置記法のそれぞれの例</title>
      <para lang="en">
        Here are some quick examples illustrating the differences between
        <emphasis>prefix</emphasis>, <emphasis>infix</emphasis>, and
        <emphasis>postfix</emphasis> notations. We'll add a 1 and 23 together:
      </para>
      <para lang="ja">
        この例は <emphasis>前置</emphasis>、 <emphasis>中置</emphasis>、 
        <emphasis>後置</emphasis> のそれぞれの記法の違いをかいつまんで
        際立たせてみました。 単純な 1 に 23 を足す計算をしています。
      </para>
      <itemizedlist>
        <listitem>
          <para lang="en">
            Prefix notation: + 1 23 (the way Scheme will want it)
          </para>
          <para lang="ja">
            前置記法では <userinput>+ 1 23</userinput> と書きます。 
            Scheme 言語はこの方式です。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            Infix notation: 1 + 23 (the way we "normally" write it)
          </para>
          <para lang="ja">
            中置記法では <userinput>1 + 23</userinput> と書きます。 
            <quote>普通</quote>の書きかたです。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            Postfix notation: 1 23 + (the way many HP calculators will want it)
          </para>
          <para lang="ja">
            後置記法では <userinput>1 23 +</userinput> と書きます。 多数の
            <acronym>HP</acronym>社製電卓がこの方式です。
            [1 に 23 を 足す という日本語文によく馴染む記法です。]
          </para>
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3>
      <title lang="en">Practicing In Scheme</title>
      <title lang="ja">Scheme の練習</title>
      <para lang="en">
        Now, let's practice what we have just learned. Start up
        <acronym>GIMP</acronym>, if you have not already done so, and choose
        <menuchoice>
          <guimenu>Filters</guimenu>
          <guisubmenu>Script-Fu</guisubmenu>
          <guimenuitem>Console</guimenuitem>
        </menuchoice>.
        This will start up the Script-Fu Console window, which allows us to
        work interactively in Scheme. In a matter of moments, the Script-Fu
        Console will appear:
      </para>
      <para lang="ja">
        では早速学んだことを練習してみましょう。 まだ<acronym>GIMP</acronym>
        が動いていなければ立て上げます。 そして画像ウィンドウのメニューから
        <menuchoice>
          <guimenu>フィルター</guimenu>
          <guisubmenu>Script-Fu</guisubmenu>
          <guimenuitem>Script-Fu コンソール</guimenuitem>
        </menuchoice>
        と進んでいただくと<quote>Script-Fu コンソール</quote>が開きます。 
        これは Scheme 言語を対話的に作動させる目的で作られた機能です。 間も無く
        <quote>Script-Fu コンソール</quote>が現れます。
      </para>
    </sect3>

    <sect3 id="gimp-using-script-fu-tutorial-console">
      <title lang="en">The Script-Fu Console Window</title>
      <title lang="ja">Script-Fuコンソールのウィンドウ</title>
      <para lang="en">
        At the bottom of this window is an entry-field ought to be entitled
        <guilabel>Current Command</guilabel>.
        Here, we can test out simple Scheme commands interactively. Let's
        start out easy, and add some numbers:
      </para>
      <para lang="ja">
        ウィンドウの下部にある一行記入欄はかつて 
        <guilabel>現在のコマンド</guilabel> とタイトルがついていました。 この
        コンソールで Scheme の単純なコマンドが対話的に試せます。 まずは気楽に
        括弧から書きはじめ、 数字を加えてみます。
      </para>
      <programlisting>(+ 3 5)</programlisting>
      <para lang="en">
        Typing this in and hitting <keycap>Enter</keycap>
        yields the expected answer of 8 in the center window.
      </para>
      <para lang="ja">
        このように記入したら <keycap>Enter</keycap> を押して送ると期待通りの
        8 という答えが中央のウィンドウに表示されます。
      </para>
      <figure>
        <title lang="en">Use Script-Fu Console.</title>
        <title lang="ja">Script-Fu コンソールを使う</title>
        <mediaobject>
          <imageobject>
            <imagedata format="PNG"
              fileref="images/using/script-fu-console.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para lang="en">
        Now, what if we wanted to add more than one number? The
        <quote>+</quote>
        function can take two or more arguments, so this is not a problem:
      </para>
      <para lang="ja">
        ではもっとたくさんの数値を合算させたいときはどうすれば
        よいのでしょう。 <quote>+</quote>の機能は 2 つ以上の引数を渡せるので
        これは難しくありません。
      </para>
      <programlisting>(+ 3 5 6)</programlisting>
      <para lang="en">This also yields the expected answer of 14.</para>
      <para lang="en">
        So far, so good &mdash; we type in a Scheme statement and it's executed
        immediately in the Script-Fu Console window. Now for a word of
        caution&hellip;
      </para>
      <para lang="ja">この式も期待通りの答えとなる 14 を返します。</para>
      <para lang="ja">
        ここまではよろしいですか。 Scheme 構文を
        <quote>Script-Fu コンソール</quote>で実行すれば直ちに答えが返されます。 
        ではここで注意を申し上げます。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Watch Out For Extra Parentheses</title>
      <title lang="ja">余計な括弧に注意しよう</title>
      <para lang="en">
        If you're like me, you're used to being able to use extra parentheses
        whenever you want to &mdash; like when you're typing a complex
        mathematical
        equation and you want to separate the parts by parentheses to make it
        clearer when you read it. In Scheme, you have to be careful and not
        insert these extra parentheses incorrectly. For example, say we wanted
        to add 3 to the result of adding 5 and 6 together:
      </para>
      <para lang="ja">
        複雑な数式を書くときも読むときもその構成をはっきりさせる目的で部分
        ごとに括弧をつけることを私などはよくやりますが、 そういう人はどこでも
        好きなところに括弧をつけ足す習慣がついています。 ところが Scheme では
        そういった余分な括弧を書かないよう気をつけねばなりません。 例えばもし
        5 たす 6 の結果に 3 [や 7] を足そうとしたら普通はこんな風に
        書くでしょう。
      </para>
      <programlisting>3 + (5 + 6) + 7 = ?</programlisting>
      <para lang="en">
        Knowing that the + operator can take a list of numbers to add, you
        might be tempted to convert the above to the following:
      </para>
      <para lang="ja">
        前置記法は<quote>+</quote>記号を数値の羅列の先頭に置くのですから、 
        書き直せばつぎのようにするのではないでしょうか。
      </para>
      <programlisting>(+ 3 (5 6) 7)</programlisting>
      <para lang="en">
        However, this is incorrect &mdash; remember, every statement in Scheme
        starts and ends with parens, so the Scheme interpreter will think that
        you're trying to call a function named <quote>5</quote> in the second
        group of parens, rather than summing those numbers before adding them
        to 3.
      </para>
      <para lang="en">
        The correct way to write the above statement would be:
      </para>
      <para lang="ja">
        でもこれは間違いです。 Scheme の構文はいずれも丸括弧ではじまり丸括弧で
        終わることを思い出してください。 Scheme のインタープリターは 2 つめの
        括弧に出会ったときに括弧内の数値を足すのではなく先頭の<quote>5</quote>と
        いう関数で始まる式の答えを出して 3 に足そうとします。
      </para>
      <para lang="ja">正しい記法はつぎのようにします。</para>
      <programlisting>(+ 3 (+ 5 6) 7)</programlisting>
    </sect3>

    <sect3>
      <title lang="en">Make Sure You Have The Proper Spacing, Too</title>
      <title lang="ja">空白も適切に入れるよう気をつけよう</title>
      <para lang="en">
        If you are familiar with other programming languages, like C/C++, Perl
        or Java, you know that you don't need white space around mathematical
        operators to properly form an expression:
      </para>
      <para lang="ja">
        C/C++ や Perl や Java のような他のプログラミング言語に慣れ親しんだ
        人なら演算子の周囲に空白をどう置くか注意しなくても数式は適切に書けると
        思っているはずです。
      </para>
      <programlisting>
        <literal>3+5, 3 +5, 3+ 5</literal>
      </programlisting>
      <para lang="en">
        These are all accepted by C/C++, Perl and Java compilers. However, the
        same is not true for Scheme. You must have a space after a
        mathematical operator (or any other function name or operator) in
        Scheme for it to be correctly interpreted by the Scheme interpreter.
      </para>
      <para lang="en">
        Practice a bit with simple mathematical equations in the Script-Fu
        Console until you're totally comfortable with these initial concepts.
      </para>
      <para lang="ja">
        C/C++ と Perl と Java のコンパイラーは上の数式のいずれも受け入れます。 
        ところが同じ規則が Scheme には通用しません。 Scheme では数式記号や
        関数名や演算子のあとに空白を置かなければ Scheme インタープリターに
        正しく解釈してもらえません。
      </para>
      <para lang="ja">
        Script-Fu コンソールを使ってもうすこしの間簡単な数式で練習を積み、 
        以上の基本的な構えにすっかり慣れるようにしてください。
      </para>
    </sect3>
  </sect2>

  <sect2 id="gimp-using-script-fu-tutorial-identifier">
    <title lang="en">Variables And Functions</title>
    <title lang="ja">変数と関数</title>
    <para lang="en">
      Now that we know that every Scheme statement is enclosed in parentheses,
      and that the function name/operator is listed first, we need to know how
      to create and use variables, and how to create and use functions. We'll
      start with the variables.
    </para>
    <para lang="ja">
      さて今、 どんな Scheme 構文も丸括弧でくくられること、 関数名や演算子は
      その先頭に置かれることが判りましたが、 つぎは変数の作り方と使い方や、
      関数の作り方と使い方を知っておかなければなりません。 まずは変数から始め
      ましょうか。
    </para>

    <sect3>
      <title lang="en">Declaring Variables</title>
      <title lang="ja">変数の定義</title>
      <para lang="en">
        Although there are a couple of different methods for declaring
        variables, the preferred method is to use the <command>let*</command>
        construct. If
        you're familiar with other programming languages, this construct is
        equivalent to defining a list of local variables and a scope in which
        they're active. As an example, to declare two variables, a and b,
        initialized to 1 and 2, respectively, you'd write:
      </para>
      <para lang="ja">
        変数の定義のしかたには2通りの方法があるのですが、 
        <command>let*</command> を使う方が好まれています。 他のプログラミング
        言語に馴染まれた方には、 この定義文が局所 (ローカル) 変数の定義と有効な
        スコープを定めるコードと同じだと申しあげておきます。 具体的には
        例えば a と b の 2 変数を定義してそれぞれ 1 と 2 で初期化[し、 合算]
        するのなら、
      </para>
      <programlisting>
        (let*
           (
              (a 1)
              (b 2)
           )
           (+ a b)
        )
      </programlisting>
      <para lang="en">or, as one line:</para>
      <para lang="ja">
        のように書きます。 これはつぎのように1行でも書けます。
      </para>
      <programlisting>(let* ( (a 1) (b 2) ) (+ a b) )</programlisting>
      <note>
        <para lang="en">
          You'll have to put all of this on one line if you're using the
          console window. In general, however, you'll want to adopt a similar
          practice of indentation to help make your scripts more readable.
          We'll talk a bit more about this in the section on White Space.
        </para>
        <para lang="ja">
          コンソールウィンドウでは 1 行にまとめて記入しなければなりません。 
          でも普通はスクリプトが見易くなるように字下げを適宜行ないたい
          ですよね。 この節で空白文字についてもう少し掘り下げて説明します。
        </para>
      </note>
      <para lang="en">
        This declares two local variables, a and b, initializes them, then
        prints the sum of the two variables.
      </para>
      <para lang="ja">
        このコードは a と b の 2 つの変数を定義して初期化し、 両局所変数の
        合算を表示して終わります。
      </para>
    </sect3>

    <sect3>
      <title lang="en">What Is A Local Variable?</title>
      <title lang="en">局所変数とは何でしょう</title>
      <para lang="en">
        You'll notice that we wrote the summation <code>(+ a b)</code> within
        the parens of the <code>let*</code> expression, not after it.
      </para>
      <para lang="en">
        This is because the <code>let*</code>
        statement defines an area in your script in which the declared
        variables are usable; if you type the <userinput>(+ a b)</userinput>
        statement after the <userinput>(let* &hellip;)</userinput> statement,
        you'll get an error, because the declared
        variables are only valid within the context of the <code>let*</code>
        statement; they are what programmers call local variables.
      </para>
      <para lang="ja">
        計算式 <code>(+ a b)</code> を <code>let*</code> 式のあとではなく
        その内部に置いたことに注目してください。
      </para>
      <para lang="ja">
        その理由はスクリプト内に書かれた <code>let*</code> 式がそこで定義した
        変数の利用可能な範囲を決めているためです。 もし 
        <userinput>(+ a b)</userinput> 式を
        <userinput>(let* &hellip;)</userinput> のあとに置いたのなら、 
        <code>let*</code> 式内で定義しておいた変数はこの式内でしか使えないので
        エラーとなります。 このような変数のことをプログラマは
        ローカル (局所) 変数と呼んでいるのです。
      </para>
    </sect3>

    <sect3>
      <title lang="en">The General Syntax Of <code>let*</code></title>
      <title lang="ja"><code>let*</code> 構文の一般規則</title>
      <para lang="en">
        The general form of a <code>let*</code> statement is:
      </para>
      <para lang="ja"><code>let*</code> 構文の一般的な形式は、</para>
      <programlisting lang="en">
        (let* ( <replaceable>variables</replaceable> )
          <replaceable>expressions</replaceable> )
      </programlisting>
      <programlisting lang="ja">
        (let* (<replaceable>変数名</replaceable>)&nbsp;&nbsp;
          <replaceable>式</replaceable>)
      </programlisting>
      <para lang="en">
        where variables are declared within parens, e.g.,
        <userinput>(a 2)</userinput>, and
        expressions are any valid Scheme expressions. Remember that the
        variables declared here are only valid within the
        <code>let*</code> statement &mdash; they're local variables.
      </para>
      <para lang="ja">
        となります。 <userinput>(a 2)</userinput> のようにして変数を括弧内で
        定義します。 <replaceable>式</replaceable> は Scheme で通用
        する表現を与えます。 繰り返しますが使ってよい変数は <code>let*</code>
        構文内で定義した変数だけです。 これらを局所変数というのでした。
      </para>
    </sect3>

    <sect3>
      <title lang="en">White Space</title>
      <title lang="ja">空白文字</title>
      <para lang="en">
        Previously, we mentioned the fact that you'll probably want to use
        indentation to help clarify and organize your scripts. This is a good
        policy to adopt, and is not a problem in Scheme &mdash; white space is
        ignored by the Scheme interpreter, and can thus be liberally applied
        to help clarify and organize the code within a script. However, if
        you're working in Script-Fu's Console window, you'll have to enter an
        entire expression on one line; that is, everything between the opening
        and closing parens of an expression must come on one line in the
        Script-Fu Console window.
      </para>
      <para lang="ja">
        先程、 スクリプトは字下げをして明確でまとまりのある書き方ができると
        申し上げました。 やってみたいと思われたことでしょう。 身に付けると
        良い習慣ですし、 Scheme 言語に問題を起こすことはありません。 空白文字
        はいくら増やしても Scheme インタープリターが無視しますので、 自由に
        使ってスクリプトを判り易くまとめるのに役立てられます。 ただし Script-Fu
        コンソール上でだけは式全体を 1 行に書く必要があります。 つまり
        式の最初の括弧 <code>(</code> から最後の括弧 <code>)</code> までが
        Script-Fu コンソールの 1 行記入欄の中に全部入らなくてはなりません。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Assigning A New Value To A Variable</title>
      <title lang="ja">新しい値を変数に代入</title>
      <para lang="en">
        Once you've initialized a variable, you might need to change its value
        later on in the script. Use the <code>set</code>! statement to change
        the variable's value:
      </para>
      <para lang="ja">
        一度変数を初期化して使用したあとで、 スクリプト内で別の値を入れて使う
        必要が生じるかもしれません。 そんなときは <code>set!</code> の出番
        です。 変数の値を変更する構文はつぎのとおりです。
      </para>
      <programlisting lang="en">
        (let* ( (theNum 10) ) (set! theNum (+ theNum theNum)) )
      </programlisting>
      <programlisting lang="ja">
        (let* ( (いろは 10) ) (set! いろは (+ いろは いろは)) )
      </programlisting>
      <para lang="en">
        Try to guess what the above statement will do, then go ahead and enter
        it in the Script-Fu Console window.
      </para>
      <para lang="ja">
        この構文がどんなことをしているかあててみてください。 そうしたら
        Script-Fu コンソールに実際に書き込んで試してみましょう。
      </para>
      <note>
        <para lang="en">
          The <quote><code>\</code></quote> indicates that there is no line
          break. Ignore it (don't type it in your Script-Fu console and don't
          hit <keycap>Enter</keycap>), just continue with the next line.
        </para>
        <para lang="ja">
          例題に<quote><code>\</code></quote>記号が書かれていることがあり
          ますが、 これは実際は改行していないことを示しています。 この文字は
          無視し、 そのまま次の行の内容を続けてください。 つまり Script-Fu
          コンソールではこの文字は記入せず、 また <keycap>Enter</keycap> も
          途中で押してはいけません。
        </para>
      </note>
    </sect3>

    <sect3>
      <title lang="en">Functions</title>
      <title lang="ja">関数</title>
      <para lang="en">
        Now that you've got the hang of variables, let's get to work with some
        functions. You declare a function with the following syntax:
      </para>
      <para lang="ja">
        さて変数のコツを掴んだところでこんどは関数の扱い方に取り組みましょう。
        関数はつぎの構文規則で定義します。
      </para>
      <programlisting lang="en">
        (define
           (
              <replaceable>name</replaceable>
              <replaceable>param-list</replaceable>
           )
           <replaceable>expressions</replaceable>
        )
      </programlisting>
      <programlisting lang="ja">
        (define
           (
              <replaceable>関数名</replaceable>
              <replaceable>パラメーターの一群</replaceable>
           )
           <replaceable>式</replaceable>
        )
      </programlisting>
      <para lang="en">
        where <replaceable>name</replaceable> is the name assigned to this
        function, <replaceable>param-list</replaceable> is a space-delimited
        list of parameter names, and <replaceable>expressions</replaceable>
        is a series of expressions that the function executes when it's
        called. For example:
      </para>
      <para lang="ja">
        ここで <replaceable>関数名</replaceable> には関数につけられた名前を、 
        <replaceable>パラメーターの一群</replaceable> にはひとつもしくは複数の
        パラメーターの名前もしくは値を空白で区切って並べます。 
        <replaceable>式</replaceable> には関数が呼ばれたときに実行する一連の
        式を書きます。 例えば、
      </para>
      <programlisting>(define (AddXY inX inY) (+ inX inY) )</programlisting>
      <para lang="en">
        <varname>AddXY</varname> is the function's name and
        <varname>inX</varname> and <varname>inY</varname>
        are the variables. This function takes its two parameters and adds
        them together.
      </para>
      <para lang="en">
        If you've programmed in other imperative languages (like C/C++, Java,
        Pascal, etc.), you might notice that a couple of things are absent in
        this function definition when compared to other programming languages.
      </para>
      <para lang="ja">
        の関数定義では <varname>AddXY</varname> が関数名であり、 
        <varname>inX</varname> と <varname>inY</varname> が変数名です。 この
        関数は 2 つのパラメーターを受けとり両者の和を返します。
      </para>
      <para lang="ja">
        C/C++ や Java や Pascal のような他の命令型言語のプログラミングを
        経験された方はそういった言語と比べて見るとこの関数定義に 2 つの
        ことがらが抜け落ちていることに気付かれたことでしょう。
      </para>
      <itemizedlist>
        <listitem>
          <para lang="en">
            First, notice that the parameters don't have any
            <quote>types</quote> (that is,
            we didn't declare them as strings, or integers, etc.). Scheme is a
            type-less language. This is handy and allows for quicker script
            writing.
          </para>
          <para lang="ja">
            ひとつめはどのパラメーターにも<quote>型</quote>がないことです。 
            つまり文字列型とか整数型といった宣言が見あたりません。 Scheme
            言語は型なし言語なのです。 この特徴があるので手軽に素早く
            スクリプトが書けます。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            Second, notice that we don't need to worry about how to
            <quote>return</quote> the result of our function &mdash; the last
            statement is the value <quote>returned</quote> when calling this
            function. Type the function into the
            console, then try something like:
          </para>
          <para lang="ja">
            ふたつめは関数が得た結果の値を<quote>返す</quote>ことに気を
            とられる必要がないことです。 一連の式のうち最後の式の値が関数を
            呼んだところに<quote>返され</quote>ます。 コンソールで試しに
            つぎのような式を書いてみて関数のはたらきを確かめましょう。
          </para>
          <programlisting>(AddXY (AddXY 5 6) 4)</programlisting>
        </listitem>
      </itemizedlist>
    </sect3>
  </sect2>

  <sect2 id="gimp-using-script-fu-tutorial-lists">
    <title lang="en">Lists, Lists And More Lists</title>
    <title lang="ja">リストにリストもそのまたリスト</title>
    <para lang="en">
      We've trained you in variables and functions, and now enter the
      murky swamps of Scheme's lists.
    </para>
    <para lang="ja">
      変数と関数の鍛錬をしたばかりですが、 ここからは Scheme のリストの
      霧靄立ち籠める湿地に足を踏み入れます。
    </para>

    <sect3>
      <title lang="en">Defining A List</title>
      <title lang="ja">リストの定義法</title>
      <para lang="en">
        Before we talk more about lists, it is necessary that you know
        the difference between atomic values and lists.
      </para>
      <para lang="en">
        You've already seen atomic values when we initialized
        variables in the previous lesson. An atomic value is a single
        value. So, for example, we can assign the variable
        <quote><varname>x</varname></quote> the
        single value of 8 in the following statement:
      </para>
      <para lang="ja">
        リストについてあれこれ話す前にアトム値とリストの何が違うのか知って
        いただく必要があります。
      </para>
      <para lang="ja">
        アトム値についてはこれまでの講義で変数を初期化するときにご覧に入れ
        ました。 アトム値とは単独値のことです。 ですから例えばつぎの構文で
        変数<quote><varname>x</varname></quote>に単なる値 8 を代入できます。
      </para>
      <programlisting>(let* ( (x 8) ) x)</programlisting>
      <para lang="en">
        (We added the expression <varname>x</varname> at the end to print out
        the value assigned to <varname>x</varname>&mdash;normally you won't
        need to do this. Notice how <code>let*</code> operates just like a
        function: The value of the last statement is the value returned.)
      </para>
      <para lang="en">
        A variable may also refer to a list of values, rather than a
        single value. To assign the variable <varname>x</varname> the
        list of values 1, 3, 5, we'd type:
      </para>
      <para lang="ja">
        この例では最後にもう一度 <varname>x</varname> とだけ書いた式をつけ
        加えました。 これは変数 <varname>x</varname> に最終的に与えられた値を
        表示させるのが目的なのですが、 普段ははこんなことをしなくても
        済みます。 というのも <code>let*</code> でも最後の構文は得た値を返す
        ようになっているためこの式自体が関数のようにふるまえるからです。
      </para>
      <para lang="ja">
        変数は単なる値のみならず一連の他の値をまとめたリストを指す
        こともできます。 値 1、 3、 5 からなるリストを変数 
        <varname>x</varname> に代入するにはこのように書きます。
      </para>
      <programlisting>(let* ( (x '(1 3 5))) x)</programlisting>
      <para lang="en">
        Try typing both statements into the Script-Fu Console and
        notice how it replies. When you type the first statement in,
        it simply replies with the result:
      </para>
      <para lang="ja">
        先の構文とこの構文をおのおの Script-Fu コンソールに打ち込んでどんな
        結果が返されるか試してみましょう。 先の構文を打ち込んだ場合は
        このような簡単な答えになります。
      </para>
      <programlisting>8</programlisting>
      <para lang="en">
        However, when you type in the other statement, it replies with
        the following result:
      </para>
      <para lang="ja">
        ところがもう一方の構文を打ち込んだ場合にはつぎのような結果を
        返します。
      </para>
      <programlisting>(1 3 5)</programlisting>
      <para lang="en">
        When it replies with the value 8 it is informing you that
        <varname>x</varname> contains the atomic value 8. However,
        when it replies with <computeroutput>(1 3 5)</computeroutput>, it is
        then informing you that
        <varname>x</varname> contains not a single value, but a list
        of values. Notice that there are no commas in our declaration
        or assignment of the list, nor in the printed result.
      </para>
      <para lang="en">The syntax to define a list is:</para>
      <para lang="ja">
        返された値が 8 の例は変数 <varname>x</varname> がアトム値 8 をもつ
        ことを示しています。 もう一方の <computeroutput>(1 3 5)
        </computeroutput> が返された例では変数 <varname>x</varname> には
        単なる値ではなく一連の値のリストが入っていたことを示します。 
        リストをつくるときコンマで区切るようなことはありませんし、 返って
        きた結果にも空白以外の区切り文字がないことに注目しましょう。
      </para>
      <para lang="ja">リストを定義する構文は、</para>
      <programlisting>'(a b c)</programlisting>
      <para lang="en">
        where <varname>a</varname>, <varname>b</varname>, and
        <varname>c</varname> are literals. We use the apostrophe
        (<code>'</code>)
        to indicate that what follows in the parentheses is a list of
        literal values, rather than a function or expression.
      </para>
      <para lang="en">An empty list can be defined as such:</para>
      <para lang="ja">
        のように書く規則になっており、 <varname>a</varname>、 
        <varname>b</varname>、 <varname>c</varname> はリテラル (値の直接表記) 
        です。 これらをまとめた丸括弧の前にアポストロフィ
        <quote><code>'</code></quote>をつけるとその括弧は関数や式ではなく
        リテラルだけで構成されたリストであることを示します。
      </para>
      <para lang="ja">空のリストもつぎのようにすれば定義できます。</para>
      <programlisting>'()</programlisting>
      <para lang="en">or simply:</para>
      <para lang="ja">もしくは単純に、</para>
      <programlisting>()</programlisting>
      <para lang="en">
        Lists can contain atomic values, as well as other lists:
      </para>
      <para lang="ja">
        と書いてもよろしい。 リストにはアトム値だけでなく他のリストも
        入れられます。
      </para>
      <programlisting>
(let*
   (
        (x
           '("GIMP" (1 2 3) ("is" ("great" () ) ) )
        )
    )
    x
)
      </programlisting>
      <para lang="en">
        Notice that after the first apostrophe, you no longer need to use an
        apostrophe when defining the inner lists. Go ahead and copy the
        statement into the Script-Fu Console and see what it returns.
      </para>
      <para lang="en">
        You should notice that the result returned is not a list of
        single, atomic values; rather, it is a list of a literal
        <code>("The GIMP")</code>, the list <code>(1 2 3)</code>, etc.
      </para>
      <para lang="ja">
        ちなみに最初にアポストロフィをつけてしまえば、 その内部でさらにリスト
        をつくるときにアポストロフィを省略できます。 それでは直ちに Script-Fu
        コンソールに上記のリストを写してどんな結果がでるか見てみましょう。
      </para>
      <para lang="ja">
        返される値が単なるアトム値のリストではないことに注意してください。 
        ここではリテラル <code>"GIMP"</code> やリスト <code>(1 2 3)</code> 
        などからなるリストができています。
      </para>
    </sect3>

    <sect3>
      <title lang="en">How To Think Of Lists</title>
      <title lang="ja">リストの考え方</title>
      <para lang="en">
        It's useful to think of lists as composed of a <quote>head</quote>
        and a <quote>tail</quote>.
        The head is the first element of the list, the tail the rest of the
        list. You'll see why this is important when we discuss how to add to
        lists and how to access elements in the list.
      </para>
      <para lang="ja">
        リストを<quote>先頭</quote>と<quote>後続</quote>からできていると
        とらえるのがうまい考え方です。 先頭とはリストの最初の要素のことであり、
        後続はリストの残りの要素のことです。 リストから要素をとりだしたり
        加えたりする方法を学ぶなかでこうしたとらえ方の重要性が判るはずです。
      </para>
    </sect3>

    <sect3>
      <title lang="en">
        Creating Lists Through Concatenation (The Cons Function)
      </title>
      <title lang="ja">連結でリストを作成 (Cons 関数)</title>
      <para lang="en">
        One of the more common functions you'll encounter is the cons
        function. It takes a value and places it to its second argument, a
        list. From the previous section, I suggested that you think of a list
        as being composed of an element (the head) and the remainder of the
        list (the tail). This is exactly how cons functions &mdash; it adds an
        element to the head of a list. Thus, you could create a list as
        follows:
      </para>
      <para lang="ja">
        今後使うことになる関数のなかでも <function>cons</function> は多く
        目にすることになる関数です。 この関数がとる変数のひとつはリストで
        あり、 第 2 引数として与えます。 さきほどリストのことを先頭の要素と後続
        の要素群としてとらえてみるよう勧めました。 それが 
        <function>cons</function> のやっていることです。 この関数は要素を
        リストの先頭に差し込みます。 それではつぎのようにリストを
        作ってみましょう。
      </para>
      <programlisting>(cons 1 '(2 3 4) )</programlisting>
      <para lang="en">The result is the list <code>(1 2 3 4)</code>.</para>
      <para lang="en">You could also create a list with one element:</para>
      <para lang="ja">
        結果的にリストは <code>(1 2 3 4)</code> となります。
      </para>
      <para lang="ja">同様にして要素がひとつだけのリストも作れます。</para>
      <programlisting>(cons 1 () )</programlisting>
      <para lang="en">
        You can use previously declared variables in place of any literals, as
        you would expect.
      </para>
      <para lang="ja">
        先に定義してあった変数が、 あらゆるリテラルの代わりに思い通りに使え
        ます。
      </para>
    </sect3>

    <sect3>
      <title lang="en">
        Defining A List Using The <code>list</code> Function
      </title>
      <title lang="en"><code>list</code> 関数を使ってリストを定義</title>
      <para lang="en">
        To define a list composed of literals or previously declared
        variables, use the <function>list</function> function:
      </para>
      <para lang="ja">
        リテラルとあらかじめ定義しておいた変数を組み合わせて、 
        <function>list</function> 関数を使ってリストを定義できます。
      </para>
      <programlisting>(list 5 4 3 a b c)</programlisting>
      <para lang="en">
        This will compose and return a list containing the values held
        by the variables <varname>a</varname>, <varname>b</varname>
        and <varname>c</varname>. For example:
      </para>
      <para lang="ja">
        この式は変数 <varname>a</varname>、 <varname>b</varname>、 
        <varname>c</varname> それぞれがもつ値を含むリストを組み立てて
        返します。 たとえば、
      </para>
      <programlisting>
        (let*  (
                  (a 1)
                  (b 2)
                  (c 3)
               )

               (list 5 4 3 a b c)
        )
      </programlisting>
      <para lang="en">
        This code creates the list <code>(5 4 3 1 2 3)</code>.
      </para>
      <para lang="ja">
        この式はリスト <code>(5 4 3 1 2 3)</code> を作成します。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Accessing Values In A List</title>
      <title lang="ja">リスト内の値を引き出す</title>
      <para lang="en">
        To access the values in a list, use the functions
        <function>car</function> and <function>cdr</function>,
        which return the first element of the list and the rest of the list,
        respectively. These functions break the list down into the head::tail
        construct I mentioned earlier.
      </para>
      <para lang="ja">
        リストの中にある値を取り出すときは <function>car</function> 関数と
        <function>cdr</function> 関数を使います。 前者がリストの先頭の要素を
        返し、 後者はその残りを返します。 先に述べたとおり両関数はリストを
        先頭と後続の構成に分解します。
      </para>
    </sect3>

    <sect3>
      <title lang="en">The <function>car</function> Function</title>
      <title lang="ja"><function>car</function> 関数</title>
      <para lang="en">
        <function>car</function> returns the first element of the list (the
        head of the list). The list needs to be non-null. Thus, the
        following returns the first element of the list:
      </para>
      <para lang="ja">
        <function>car</function> はリストの最初の要素 (リストの先頭) を返し
        ます。 リストが空ではいけません。 つぎの式はリストの先頭の要素を
        返します。
      </para>
      <programlisting>(car '("first" 2 "third"))</programlisting>
      <para lang="en">which is:</para>
      <para lang="ja">すなわちこれはつぎの値と同じです。</para>
      <programlisting>"first"</programlisting>
    </sect3>

    <sect3>
      <title lang="en">The <function>cdr</function> function</title>
      <title lang="ja"><function>cdr</function> 関数</title>
      <para lang="en">
        <function>cdr</function> returns the rest of the list after the first
        element
        (the tail of the list). If there is only one element in the list, it
        returns an empty list.
      </para>
      <para lang="ja">
        <function>cdr</function> はリストから先頭の値を除外した残りの要素の
        リスト (リストの後続) を返します。 リストにひとつしか要素が入って
        いなかった場合は空のリストが返されます。
      </para>
      <programlisting>(cdr '("first" 2 "third"))</programlisting>
      <para lang="en">returns:</para>
      <para lang="ja">この式が返すのはつぎのとおりです。</para>
      <programlisting>(2 "third")</programlisting>
      <para lang="en">whereas the following:</para>
      <para lang="en">また、</para>
      <programlisting lang="en">(cdr '("one and only"))</programlisting>
      <programlisting lang="ja">(cdr '("たったひとつ"))</programlisting>
      <para lang="en">returns:</para>
      <para lang="ja">この式が返すのはつぎのとおりです。</para>
      <programlisting>()</programlisting>
    </sect3>

    <sect3>
      <title lang="en">Accessing Other Elements In A List</title>
      <title lang="ja">リストの他の位置の要素を引き出す</title>
      <para lang="en">
        OK, great, we can get the first element in a list, as well as
        the rest of the list, but how do we access the second, third
        or other elements of a list? There exist several "convenience"
        functions to access, for example, the head of the head of the
        tail of a list (<code>caadr</code>), the tail of the tail of a
        list (<code>cddr</code>), etc.
      </para>
      <para lang="en">
        The basic naming convention is easy: The a's and d's represent
        the heads and tails of lists, so
      </para>
      <para lang="ja">
        はい、 もう十分です。 リストから先頭の要素も後続の要素たちも取り出せる
        ようになりました。 それではリストの 2 番目や 3 番目などほかの要素は
        どんなふうにしたら取り出せるのでしょう。 ここで使える
        <emphasis>便利</emphasis> な関数があります。 たとえば後続の先頭の先頭を
        引き出すには <code>caadr</code> が、 後続から後続の要素群を引き出すには
        <code>cddr</code> が使えるというふうになっています。
      </para>
      <para lang="ja">
        根本的に命名規則は簡単です。 a や d がそれぞれリストの先頭や後続を
        表しているのです。 ですから
      </para>
      <programlisting>(car (cdr (car x) ) )</programlisting>
      <para lang="en">could be written as:</para>
      <para lang="ja">という式はつぎのように書き直せます。</para>
      <programlisting>(cadar x)</programlisting>
      <para lang="en">
        To get some practice with list-accessing functions, try typing in the
        following (except all on one line if you're using the console); use
        different variations of <function>car</function> and
        <function>cdr</function> to access the different elements of the list:
      </para>
      <para lang="ja">
        リスト用引き出し関数の練習のためつぎのスクリプトを書いてみましょう。
        コンソール上で試すときは1行につづけて書きます。 そうしたら 
        <function>car</function> と <function>cdr</function> の両関数を
        いろいろ組み合わせてリスト内の要素群を取り出す式を作ってみましょう。
      </para>
      <programlisting lang="en">
        (let* (
                 (x  '( (1 2 (3 4 5) 6)  7  8  (9 10) )
                 )
              )
              ; place your car/cdr code here
        )
      </programlisting>
      <programlisting lang="ja">
        (let* (
                 (x  '( (1 2 (3 4 5) 6)  7  8  (9 10) )
                 )
              )
              ; この行以降にご自分なりの式を car や cdr を駆使して書きます
        )
      </programlisting>
      <para lang="en">
        Try accessing the number 3 in the list using only two function
        calls. If you can do that, you're on your way to becoming a
        Script-Fu Master!
      </para>
      <para lang="ja">
        両関数だけをいろいろ組み合わせて、 リストから数字の 3 を引き出す式を
        書きましょう。 これができるならあなたは Script-Fu の達人になりつつ
        あるのです。
      </para>
      <note>
        <para lang="en">
          In Scheme, a semicolon (<code>;</code>) marks a comment.  It, and
          anything that follows it on the same line, are ignored by the
          script interpreter, so you can use this to add comments to jog
          your memory when you look at the script later.
        </para>
        <para lang="ja">
          Scheme 言語ではセミコロン (<code>;</code>) がコメントを
          表しています。 この記号とここから行の終わりまでは何を書いても
          スクリプトのインタープリターが無視しますので、 この方法でスクリプトに
          コメントをさしはさみ、 あとで読むときの記憶の助けに利用しましょう。
        </para>
      </note>
    </sect3>
  </sect2>

  <sect2 id="gimp-using-script-fu-tutorial-first-script">
    <title lang="en">Your First Script-Fu Script</title>
    <title lang="ja">はじめてのScript-Fuスクリプト</title>
    <para lang="en">
      Do you not need to stop and catch your breath? No? Well then,
      let's proceed with your fourth lesson &mdash; your first Script-Fu
      Script.
    </para>
    <para lang="ja">
      ひと息ついて休みをとる必要はないですか。 大丈夫ですね。 よろしい、では
      いよいよはじめての Script-Fu スクリプトを書く第4段階に進みましょう。
    </para>

    <sect3>
      <title lang="en">Creating A Text Box Script</title>
      <title lang="ja">テキストボックススクリプトを作成</title>
      <para lang="en">
        One of the most common operations I perform in <acronym>GIMP</acronym>
        creating a box with some text in it for a web page, a logo or
        whatever. However, you never quite know how big to make the
        initial image when you start out. You don't know how much
        space the text will fill with the font and font size you
        want.
      </para>
      <para lang="en">
        The Script-Fu Master (and student) will quickly realize that
        this problem can easily be solved and automated with
        Script-Fu.
      </para>
      <para lang="en">
        We will, therefore, create a script, called Text Box, which
        creates an image correctly sized to fit snugly around a line
        of text the user inputs. We'll also let the user choose the
        font, font size and text color.
      </para>
      <para lang="ja">
        <acronym>GIMP</acronym>を使った私の経験では一番多い使い道のひとつが
        ウェブ用にテキストの入ったロゴやら何やらの作成でした。 でもみなさんに
        とっては新規画像をどれ位の寸法で作ったら良いか全然判らないはずです。 
        テキストに使いたい文字の大きさが判ってもそれが画像をどれ位占めるのか
        見当がつきません。
      </para>
      <para lang="ja">
        Script-Fu の達人も入門者のみなさんも Script-Fu を使ったら簡単かつ自動的
        にこの問題を解決できるとすぐ気付くはずです。
      </para>
      <para lang="ja">
        したがってテキストボックスという名前でスクリプトを書いて、 これに
        画像を作らせ、 テキストを与えたらちょうどぴったり囲む
        頃合いの寸法になるようなスクリプトにしましょう。 それから好みの
        フォントやフォントサイズや文字色が選べるようにしましょう。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Editing And Storing Your Scripts</title>
      <title lang="ja">スクリプトを書いて保存</title>
      <para lang="en">
        Up until now, we've been working in the Script-Fu Console. Now,
        however, we're going to switch to editing script text files.
      </para>
      <para lang="en">
        Where you place your scripts is a matter of preference &mdash; if you
        have access to <acronym>GIMP</acronym>'s default script directory, you
        can place your scripts
        there. However, I prefer keeping my personal scripts in my own script
        directory, to keep them separate from the factory-installed scripts.
      </para>
      <para lang="en">
        In the <filename class="directory">.gimp-2.6</filename> directory that
        <acronym>GIMP</acronym> made off of your home directory, you should
        find a directory called <filename class="directory">scripts</filename>.
        <acronym>GIMP</acronym> will automatically look in your
        <filename class="directory">.gimp-2.6</filename> directory for a
        <filename class="directory">scripts</filename> directory, and add the
        scripts in this directory to the
        Script-Fu database. You should place your personal scripts here.
      </para>
      <para lang="ja">
        ここまで私たちは<quote>Script-Fu コンソール</quote>を使ってきました。
        しかし今からスクリプトはテキストファイルに書くことにします。
      </para>
      <para lang="ja">
        自作のスクリプトをどこに置くかは好みの設定の問題でもあります。 もし
        <acronym>GIMP</acronym>の標準のスクリプト用ディレクトリーを操作できる
        権限をお持ちならそこに保管することもできます。 でも私なら自作の
        スクリプトは個人用スクリプト保管ディレクトリーに収めるようにして、 
        <acronym>GIMP</acronym>提供の同梱スクリプトとは混ぜないようにします。
      </para>
      <para lang="ja">
        ホームディレクトリ内に<acronym>GIMP</acronym>が作成する 
        <filename class="directory">.gimp-2.6</filename> ディレクトリーに 
        <filename class="directory">scripts</filename> フォルダーができている
        のをお確かめください。<footnote><para>
          <productname>Mac OS X</productname> では <filename role="html"
          class="directory">~/Library/Application&nbsp;Support/Gimp/scripts
          </filename>
          <filename role="tex" class="directory">~/Library/Application
          Support/Gimp/scripts</filename> です。</para></footnote>
        <acronym>GIMP</acronym>は必ず 
        <filename class="directory">.gimp-2.6</filename> ディレクトリー内で
        <filename class="directory">scripts</filename> フォルダーを探し、 
        このディレクトリパスを Script-Fu データベースに入れます。 個人用の
        スクリプトはここに入れるべきでしょう。
      </para>
    </sect3>

    <sect3>
      <title lang="en">The Bare Essentials</title>
      <title lang="ja">肝心要</title>
      <para lang="en">
        Every Script-Fu script defines at least one function, which is the
        script's main function. This is where you do the work.
      </para>
      <para lang="en">
        Every script must also register with the procedural database, so you
        can access it within GIMP.
      </para>
      <para lang="ja">
        どんな Script-Fu スクリプトもそのメイン関数として少なくとも 1 つの
        関数を定義します。 この作業にとりかかりましょう。
      </para>
      <para lang="ja">
        またどんな Script-Fu もプロシージャーデータベースに登録して
        <acronym>GIMP</acronym>から呼び出せるようにもしなければなりません。
      </para>
      <para lang="en">We'll define the main function first:</para>
      <para lang="ja">ではメイン関数をまず定義しましょう。</para>
      <programlisting>
        (define (script-fu-text-box inText inFont inFontSize inTextColor))
      </programlisting>
      <para lang="en">
        Here, we've defined a new function called script-fu-text-box that
        takes four parameters, which will later correspond to some text, a
        font, the font size, and the text's color. The function is currently
        empty and thus does nothing. So far, so good &mdash; nothing new,
        nothing fancy.
      </para>
      <para lang="ja">
        この式で <function>script-fu-text-box</function> という名前の関数を
        定義し、 テキストや書体や書体の寸法や文字色を受け入れる 4 つの
        パラメーターをとることにします。 関数は今のところ中身がないので
        何もできません。 ここまではよろしいですか。 目新しいところは
        まだありません。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Naming Conventions</title>
      <title lang="ja">命名規則</title>
      <para lang="en">
        Scheme's naming conventions seem to prefer lowercase letters with
        hyphens, which I've followed in the naming of the function. However,
        I've departed from the convention with the parameters. I like more
        descriptive names for my parameters and variables, and thus add the
        "in" prefix to the parameters so I can quickly see that they're values
        passed into the script, rather than created within it. I use the
        prefix "the" for variables defined within the script.
      </para>
      <para lang="en">
        It's <acronym>GIMP</acronym> convention to name your script functions
        <function>script-fu-abc</function>,
        because then when they're listed in the procedural database, they'll
        all show up under script-fu when you're listing the functions. This
        also helps distinguish them from plug-ins.
      </para>
      <para lang="ja">
        Schemeの変数や関数の名前は小文字の英字を適宜ハイフンでつないだ表現が
        好まれているようです。 それで私も同じ規則でこの関数の名前をつけ
        ました。 ただしパラメーターについてはその規則から外れた方法をとることに
        します。 私は変数やパラメーターにはもっと説明的な書き方をするのが好き
        なので、 パラメーターの頭に<quote>in</quote>をつけて関数が受け取った
        変数だとすぐ判るようにして、 他のところで作った変数と区別します。 
        またスクリプト内で定義した変数の頭には<quote>the</quote>をつけます。
      </para>
      <para lang="ja">
        <acronym>GIMP</acronym>では Script-Fu スクリプトの関数名を 
        <function>script-fu-abc</function> とする習慣になっています。 こうすると
        プロシージャーデータベースを検索するとき関数名で整列させると script-fu
        ではじまる名前でまとまるからです。 またこの方法はプラグインと区別
        するのにも役立ちます。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Registering The Function</title>
      <title lang="ja">関数を登録</title>
      <para lang="en">
        Now, let's register the function with <acronym>GIMP</acronym>. This is
        done by calling the function <function>script-fu-register</function>.
        When <acronym>GIMP</acronym> reads in a
        script, it will execute this function, which registers the
        script with the procedural database. You can place this
        function call wherever you wish in your script, but I usually
        place it at the end, after all my other code.
      </para>
      <para lang="en">
        Here's the listing for registering this function (I will
        explain all its parameters in a minute):
      </para>
      <para lang="ja">
        ではこの関数を<acronym>GIMP</acronym>に登録しましょう。 この操作には
        <function>script-fu-register</function> という関数を起用します。
        <acronym>GIMP</acronym>はスクリプトを見るとこの関数を実行し
        プロシージャーデータベースに登録させます。 この関数の実行コードは
        スクリプトのどの位置に置いても構いませんが、 私なら他のコードを全部
        書き終えたあとの最後に置きます。
      </para>
      <para lang="ja">
        関数を登録している様子をつぎに示します。 パラメーターに関してはまもなく
        説明します。
      </para>
      <programlisting><![CDATA[
  (script-fu-register
    "script-fu-text-box"                        ;func name
    "Text Box"                                  ;menu label
    "Creates a simple text box, sized to fit\
      around the user's choice of text,\
      font, font size, and color."              ;description
    "Michael Terry"                             ;author
    "copyright 1997, Michael Terry;\
      2009, the GIMP Documentation Team"        ;copyright notice
    "October 27, 1997"                          ;date created
    ""                     ;image type that the script works on
    SF-STRING      "Text"          "Text Box"   ;a string variable
    SF-FONT        "Font"          "Charter"    ;a font variable
    SF-ADJUSTMENT  "Font size"     '(50 1 1000 1 10 0 1)
                                                ;a spin-button
    SF-COLOR       "Color"         '(0 0 0)     ;color variable
  )
  (script-fu-menu-register "script-fu-text-box" "<Image>/File/Create/Text")
      ]]></programlisting>
      <para lang="en">
        If you save these functions in a text file with a
        <filename class="extension">.scm</filename> suffix
        in your script directory, then choose
        <menuchoice>
          <guimenu>Filters</guimenu>
          <guisubmenu>Script-Fu</guisubmenu>
          <guimenuitem>Refresh Scripts</guimenuitem>
        </menuchoice>,
        this new script will appear as
        <menuchoice>
          <guimenu>File</guimenu>
          <guisubmenu>Create</guisubmenu>
          <guisubmenu>Text</guisubmenu>
          <guimenuitem>Text Box</guimenuitem>
        </menuchoice>.
      </para>
      <para lang="en">
        If you invoke this new script, it won't do anything, of course, but
        you can view the prompts you created when registering the script (more
        information about what we did is covered next).
      </para>
      <para lang="en">
        Finally, if you invoke the Procedure Browser (
        <menuchoice>
          <guimenu>Help</guimenu>
          <guimenuitem>Procedure Browser</guimenuitem>
        </menuchoice>),
        you'll notice that our script now appears in the database.
      </para>
      <para lang="ja">
        以上の関数をテキストファイルにして <filename class="extension">.scm
        </filename> という拡張子をつけた名前で保存し、 スクリプトの個人用
        フォルダーに置いたら、 画像ウィンドウのメニューより 
        <menuchoice>
          <guimenu>フィルター</guimenu>
          <guisubmenu>Script-Fu</guisubmenu>
          <guimenuitem>スクリプトを再読み込み</guimenuitem>
        </menuchoice>
        を実行してください。 すると作成したばかりのスクリプトが 
        <menuchoice>
          <guimenu>ファイル</guimenu>
          <guisubmenu>画像の生成</guisubmenu>
          <guisubmenu>Text</guisubmenu>
          <guimenuitem>Text Box</guimenuitem>
        </menuchoice>
        としてメニューに出現します。
      </para>
      <para lang="ja">
        この新しいスクリプトは実行しても何も起こりません。 もちろんメニューを
        辿れば説明文が表示されますし、 呼び出せばウィンドウも現れます。
        スクリプトの登録が反映されたからなのですが、 何が起きたかの情報に
        ついてはあとで詳しく説明します。
      </para>
      <para lang="ja">
        最後にプロシージャーブラウザーを画像ウィンドウのメニューより 
        <menuchoice>
          <guimenu>ヘルプ</guimenu>
          <guimenuitem>プロシージャーブラウザー</guimenuitem>
        </menuchoice>
        と辿って開き、 作ったばかりのスクリプトがデータベースに登録されて
        いることをご確認ください。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Steps For Registering The Script</title>
      <title lang="ja">スクリプトを登録するための工程</title>
      <para lang="en">
        To register our script with <acronym>GIMP</acronym>, we call the
        function <function>script-fu-register</function>, fill in the seven
        required parameters and add our script's own parameters, along with a
        description and default value for each parameter.
      </para>
      <para lang="ja">
        <acronym>GIMP</acronym>にスクリプトを登録するために登録関数 
        <function>script-fu-register</function> を起用しますが、 これには
        7 つの必須パラメーターとスクリプト独自のパラメーター、 そして説明文と
        それぞれのパラメーターの初期設定値を加えることになります。
      </para>
      <itemizedlist>
        <title lang="en">The Required Parameters</title>
        <title lang="ja">必須のパラメーター</title>
        <listitem>
          <para lang="en">
            The <emphasis>name</emphasis> of the function we
            defined. This is the function called when our script is invoked
            (the entry-point into our script). This is necessary because we may
            define additional functions within the same file, and
            <acronym>GIMP</acronym> needs to
            know which of these functions to call. In our example, we only
            defined one function, text-box, which we registered.
          </para>
          <para lang="ja">
            関数の <emphasis>名前</emphasis> を定めました。 スクリプトを起用
            したときに呼び出される関数がこれです。 スクリプトへの入口の役目を
            果たしています。 同じファイル内に他にも関数を書き加えることになる
            かもしれないので、 <acronym>GIMP</acronym>がどの関数をまず呼び
            出すべきか判断できるよう、 こうして定義することが重要です。 先の
            例で登録したのは text-box というたったひとつの関数です。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            The <emphasis>location</emphasis> in the menu where
            the script will be inserted. The exact location of the script is
            specified like a path in Unix, with the root of the path being
            image menu as <code>&lt;Image&gt;</code>.<footnote><para>
              Before version 2.6, <code>&lt;Toolbox&gt;</code> could be also
              used, but now the toolbox menu is removed, so don't use it.
            </para></footnote>
          </para>
          <para lang="en"><!--TODO: obsolete?-->
            If your script does not operate on an existing image (and thus
            creates a new image, like our Text Box script will), you'll want
            to insert it in the image window menu, which you can access
            through the image menu bar, by right-clicking the image window,
            by clicking the menu button icon at the left-top corner of the
            image window, or by pressing <keycap>F10</keycap>.
          </para>
          <para lang="en"><!--FIXME: en needs more review!-->
            If your script is intended to work on an image being edited,
            you'll want to insert it in the image window menu.
            The rest of the path points to the menu lists, menus and sub-menus.
            Thus, we registered our Text Box script in the
            <guisubmenu>Text</guisubmenu> menu of the
            <guisubmenu>Create</guisubmenu> menu of the <guimenu>File</guimenu>
            menu.<footnote><para>
              The original, written by Mike, says put the menu entry in the
              Script-Fu menu of the <guimenu>Xtns</guimenu> menu at the
              Toolbox, but since version 2.6, the Toolbox menu had been removed
              and merged with the image window menubar.
            </para></footnote>
            (<menuchoice>
              <guimenu>File</guimenu>
              <guisubmenu>Create</guisubmenu>
              <guisubmenu>Text</guisubmenu>
              <guimenuitem>Text Box</guimenuitem>
            </menuchoice> ).
          </para>
          <para lang="en">
            If you notice, the Text sub-menu in the File/Create menu wasn't
            there when we began &mdash; <acronym>GIMP</acronym> automatically
            creates any menus not already existing.
          </para>
          <para lang="ja">
            スクリプトを挿入するメニュー内での <emphasis>位置</emphasis> を
            定めます。 スクリプトの位置を Unix 風のパス表記で正確に指定して
            ください。 パスのはじめ (ルート) には <code>&lt;Image&gt;</code>
            が指定できます。 <footnote><para>
              バージョン 2.6 よりも前はツールボックスを表す 
              <code>&lt;Toolbox&gt;</code> も指定できました。 ツールボックスの
              メニューは廃止されたので、 こちらは使わないほうが無難です。
              </para></footnote>
          </para>
          <para lang="ja">
            既存の画像を加工しないスクリプトを書いた場合 (このテキスト
            ボックスのような画像を新たに作成するスクリプトもこの分類に
            含まれる)、 <acronym>GIMP</acronym>の分類に従いそのスクリプトを 
            <menuchoice>
              <guimenu>ファイル</guimenu>
              <guisubmenu>画像の生成</guisubmenu>
            </menuchoice>
            サブメニュー内に置きたいと考えるはずです。 このメニューは画像
            ウィンドウのメニューバーから辿れるほか、 ウィンドウ上を 
            <mousebutton>第2ボタン</mousebutton> でクリック、
            もしくはウィンドウ左上隅の小さなメニューボタンアイコンをクリック、
            あるいは <keycap>F10</keycap> キーを押せば呼びだせます。
          </para>
          <para lang="ja">
            それとは反対に画像を編集・加工する目的のスクリプトを書いた場合は
            画像ウィンドウのメニューの <guimenu>ファイル</guimenu> メニュー
            や、 標準にはない <guimenu>Script-Fu</guimenu> メニューの中に
            置こうと考えるはずです。 いずれにしろ位置の定義はどのメニューの
            どのサブメニュー内にするかということに絞られます。 以上の理由
            から、 画像ウィンドウのメニューの <guimenu>ファイル</guimenu> 
            メニューの <guisubmenu>画像の生成</guisubmenu> サブメニューの中に
            <guisubmenu>Text</guisubmenu> サブメニューを設け、 このテキスト
            ボックススクリプトをその中に収めることにしましょう。<footnote>
            <para>
              マイクテリー氏の原文はツールボックスメニュー内の 
              <guimenu>Xtns</guimenu> 以下にスクリプトを置いていますが、 
              <application><acronym>GIMP</acronym> 2.6</application> で
              ツールボックスメニューが廃止され画像ウィンドウメニューに
              されました。</para></footnote>つまり
            <menuchoice>
              <guimenu>ファイル</guimenu>
              <guisubmenu>画像の生成</guisubmenu>
              <guisubmenu>Text</guisubmenu>
              <guimenuitem>Text Box</guimenuitem>
            </menuchoice>
            という位置になります。
          </para>
          <para lang="ja">
            もうお気付きだとは思いますが <guisubmenu>画像の生成</guisubmenu>
            以下に <guisubmenu>Text</guisubmenu> サブメニューがまだできて
            いません。 存在しないメニューやサブメニューを使った場合は
            <acronym>GIMP</acronym>が自動的にそのメニューを作成します。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            A <emphasis>description</emphasis> of your
            script, to be displayed in the Procedure Browser.
          </para>
          <para lang="ja">
            スクリプトの <emphasis>説明</emphasis> 文をつけると、 
            プロシージャーブラウザーで表示されます。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            <emphasis>Your name</emphasis> (the author of the script).
          </para>
          <para lang="ja">
            <emphasis>あなたのお名前</emphasis> はスクリプトの作者を書き
            ます。
          </para>
        </listitem>
        <listitem>
          <para lang="en"><emphasis>Copyright</emphasis> information.</para>
          <para lang="ja"><emphasis>著作権</emphasis> を明示します。</para>
        </listitem>
        <listitem>
          <para lang="en">
            The <emphasis>date</emphasis> the script was
            made, or the last revision of the script.
          </para>
          <para lang="ja">
            スクリプトの <emphasis>作成日</emphasis> には作成した日付か
            最近の改訂日付を記します。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            The <emphasis>types</emphasis> of images the script
            works on. This may be any of the following: RGB, RGBA, GRAY,
            GRAYA, INDEXED, INDEXEDA. Or it may be none
            at all &mdash; in our case,
            we're creating an image, and thus don't need to define the type of
            image on which we work.
          </para>
          <para lang="ja">
            スクリプトが作動できる画像の <emphasis>形式</emphasis> を
            定めます。 適合できる 
            <xref linkend="gimp-concepts-image-types"/> を<acronym>RGB
            </acronym>、 <acronym>RGBA</acronym>、 GRAY、GRAYA、 INDEXED、
            INDEXEDAのなかから選びます (複数可)。 しかし今回の例では画像を
            生成するスクリプトを書いているので画像の形式を設定する必要は
            ありません。
          </para>
        </listitem>
      </itemizedlist>
      <figure>
        <title lang="en">The menu of our script.</title>
        <title lang="ja">メニューにこのスクリプトが現れた様子</title>
        <mediaobject>
          <imageobject>
            <imagedata format="PNG"
              fileref="images/using/script-fu-menu.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect3>

    <sect3>
      <title lang="en">Registering The Script's Parameters</title>
      <title lang="ja">スクリプトのパラメーターを登録</title>
      <para lang="en">
        Once we have listed the required parameters, we then need to list the
        parameters that correspond to the parameters our script needs. When we
        list these params, we give hints as to what their types are. This is
        for the dialog which pops up when the user selects our script. We also
        provide a default value.
      </para>
      <para lang="en">
        This section of the registration process has the following format:
      </para>
      <para lang="ja">
        必須のパラメーターを列挙したので、 ここでスクリプトが使うパラメーターに
        ついて一覧表にまとめておきます。 これらの媒介変数を紹介するにあたり
        その型式がわかるようにしました。 これはスクリプトが呼ばれると現れる
        ダイアログを構成するために使います。 また変数には初期設定値を与えて
        おきます。
      </para>
      <para lang="ja">
        この節で行なわれる登録処理にはつぎの型式が関わります。
      </para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>
                <para lang="en">Param Type</para>
                <para lang="ja">パラメーターの型</para>
              </entry>
              <entry>
                <para lang="en">Description</para>
                <para lang="ja">説明</para>
              </entry>
              <entry>
                <para lang="en">Example</para>
                <para lang="ja">値の例</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para><function>SF-IMAGE</function></para>
              </entry>
              <entry>
                <para lang="en">
                  If your script operates on an open image, this should be the
                  first parameter after the required parameters.
                  <acronym>GIMP</acronym> will
                  pass in a reference to the image in this parameter.
                </para>
                <para lang="ja">
                  既に開いてある画像を操作するためのスクリプトを作るときは、
                  必須のパラメーターの直後にこのパラメーターを置かねば
                  なりません。 <acronym>GIMP</acronym>は画像を参照するための
                  情報をこのパラメーターに乗せてスクリプトに渡します。
                </para>
              </entry>
              <entry>
                <para>3</para>
              </entry>
            </row>
            <row>
              <entry>
                <para><function>SF-DRAWABLE</function></para>
              </entry>
              <entry>
                <para lang="en">
                  If your script operates on an open image, this should be the
                  second parameter after the <function>SF-IMAGE</function>
                  param. It
                  refers to the active layer. <acronym>GIMP</acronym> will pass
                  in a reference to the active layer in this parameter.
                </para>
                <para lang="ja">
                  既に開いてある画像を操作するためのスクリプトを作るときは、
                  <function>SF-IMAGE</function> 型のパラメーターのつぎにこの
                  パラメーターを置かなくてはなりません。 これは活性レイヤーを
                  参照します。 <acronym>GIMP</acronym>は活性レイヤーを参照する
                  ための情報をこのパラメーターに乗せてスクリプトに渡します。
                </para>
              </entry>
              <entry>
                <para>17</para>
              </entry>
            </row>
            <row>
              <entry>
                <para><function>SF-VALUE</function></para>
              </entry>
              <entry>
                <para lang="en">
                  Accepts numbers and strings. Note that quotes must be
                  escaped for default text, so better use
                  <function>SF-STRING</function>.
                </para>
                <para lang="ja">
                  数値と文字列の両方を受け入れる型です。 初期設定のテキストを
                  渡すとき引用符をエスケープ処理しなければならなくなるので、 
                  文字列には <function>SF-STRING</function> 型の方が
                  適しています。
                </para>
              </entry>
              <entry>
                <para>42</para>
              </entry>
            </row>
            <row>
              <entry>
                <para><function>SF-STRING</function></para>
              </entry>
              <entry>
                <para lang="en">Accepts strings.</para>
                <para lang="ja">文字列を収める変数です。</para>
              </entry>
              <entry>
                <para>"Some text"</para>
              </entry>
            </row>
            <row>
              <entry>
                <para><function>SF-COLOR</function></para>
              </entry>
              <entry>
                <para lang="en">
                  Indicates that a color is requested in this parameter.
                </para>
                <para lang="ja">
                  このパラメーターが要求する色の情報を示します。
                </para>
              </entry>
              <entry>
                <para>'(0 102 255)</para>
              </entry>
            </row>
            <row>
              <entry>
                <para><function>SF-TOGGLE</function></para>
              </entry>
              <entry>
                <para lang="en">
                  A checkbox is displayed, to get a Boolean value.
                </para>
                <para lang="ja">
                  真理2値をとるチェックボックスを表示します。
                </para>
              </entry>
              <entry>
                <para lang="en">TRUE or FALSE</para>
                <para lang="ja">有効なら TRUE、 無効なら FALSE</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <xi:include href="script-fu-gui-api.xml"/>
  </sect2>

  <sect2 id="gimp-using-script-fu-tutorial-script">
    <title lang="en">Giving Our Script Some Guts</title>
    <title lang="ja">スクリプトを肉付け</title>
    <para lang="en">
      Let us continue with our training and add some functionality to our
      script.
    </para>
    <para lang="ja">
      さあ訓練を続けましょう。 こんどはスクリプトに機能を加えます。
    </para>

    <sect3>
      <title lang="en">Creating A New Image</title>
      <title lang="ja">新しい画像を生成</title>
      <para lang="en">
        In the previous lesson, we created an empty function and registered it
        with <acronym>GIMP</acronym>. In this lesson, we want to provide
        functionality to our script &mdash; we want to create a new image,
        add the user's text to it and resize the image to fit the text exactly.
      </para>
      <para lang="en">
        Once you know how to set variables, define functions and access list
        members, the rest is all downhill &mdash; all you need to do is
        familiarize yourself with the functions available in
        <acronym>GIMP</acronym>'s procedural database and call those functions
        directly. So fire up the
        <xref linkend="plug-in-dbbrowser"/> and let's get cookin'!
      </para>
      <para lang="en">
        Let's begin by making a new image. We'll create a new variable,
        <varname>theImage</varname>, set to the result of calling
        <acronym>GIMP</acronym>'s
        built-in function <function>gimp-image-new</function>.
      </para>
      <para lang="en">
        As you can see from the DB Browser, the function
        <function>gimp-image-new</function> takes three parameters &mdash; the
        image's width, height and the type of image. Because we'll
        later resize the image to fit the text, we'll make a 10x10 pixels
        <acronym>RGB</acronym>
        image. We'll store the image's width and sizes in some
        variables, too, as we'll refer to and manipulate them later in
        the script.
      </para>
      <para lang="ja">
        先の講義では中身のない関数を作成し<acronym>GIMP</acronym>に登録
        しました。 この講義ではスクリプトに肉付けを行ないます。 スクリプト
        には新しい画像を作成させ、 ユーザーが指定するテキストを加えてテキスト
        にぴったりな大きさに画像の寸法を調節させるつもりです。
      </para>
      <para lang="ja">
        変数の設定や関数の定義、 リストの要素を引き出す方法についてはもう
        学びましたので、 あとは坂を滑り下りるだけです。 これからなすべきこと
        は<acronym>GIMP</acronym>のプロシージャーデータベースで利用可能な関数に
        慣れ親しみ、 それらの機能を直に呼び出すことが全てです。 では早速
        <xref linkend="plug-in-dbbrowser"/> を立て上げてお料理しましょう。
      </para>
      <para lang="ja">
        新しい画像を作成するところから始めます。 <varname>theImage</varname>
        という新しい変数を作り、 <function>gimp-image-new</function> という
        <acronym>GIMP</acronym>の組み込み機能を実行して得た値を代入するのです。
      </para>
      <para lang="ja">
        プロシージャーデータベースのブラウザーによると、 
        <function>gimp-image-new</function> は画像の幅、 高さ、 型式の 3 つの
        パラメーターをとります。 画像の大きさはあとでテキストに合わせて
        変更するので、 とりあえず 10&times;10 ピクセルの<acronym>RGB</acronym>
        画像を作成させます。 画像の幅と高さのパラメーターやいくつかの変数は
        あとでスクリプトが操作するために参照する必要があるのでここで
        保管しておきます。
      </para>
      <programlisting lang="en">
        (define (script-fu-text-box inText inFont inFontSize inTextColor)
        (let*
              (
                 ; define our local variables
                 ; create a new image:
                 (theImageWidth  10)
                 (theImageHeight 10)
                 (theImage (car
                                (gimp-image-new
                                 theImageWidth
                                 theImageHeight
                                 RGB
                                )
                           )
                 )
                 (theText)     ;a declaration for the text
                               ;we create later
      </programlisting>
      <programlisting lang="ja">
        (define (script-fu-text-box inText inFont inFontSize inTextColor)
        (let*
              (
                 ; define our local variables
                 ; create a new image: (新しい画像を作る局所変数を定義する)
                 (theImageWidth  10)
                 (theImageHeight 10)
                 (theImage (car
                                (gimp-image-new
                                 theImageWidth
                                 theImageHeight
                                 RGB
                                )
                           )
                 )
                 (theText)      ;a declaration for the text (テキストの定義)
                                ;we create later (あとで作成するつもり)
      </programlisting>
      <para lang="en">
        Note: We used the value <code>RGB</code> to specify that the image
        is an <acronym>RGB</acronym> image. We could have also used
        <code>0</code>, but <acronym>RGB</acronym> is more descriptive
        when we glance at the code.
      </para>
      <para lang="en">
        You should also notice that we took the head of the result of the
        function call. This may seem strange, because the database explicitly
        tells us that it returns only one value &mdash; the ID of the newly
        created image. However, all <acronym>GIMP</acronym> functions return a
        list, even if there is
        only one element in the list, so we need to get the head of the list.
      </para>
      <para lang="ja">
        <note>
          <para>
            ここでは<acronym>RGB</acronym>画像を示すために <code>RGB</code> 
            という値を使いました。 代わりに <code>0</code> としても同じ結果に
            なりますが、 コードを読む人にとっては<acronym>RGB</acronym>
            と明示した方が説明的で理解し易くなります。
          </para>
        </note>
      </para>
      <para lang="ja">
        関数を呼び出した結果の値から先頭の要素を引き出しているところにご注目
        ください。 これは奇妙な感じがします。 というのもデータベースには
        はっきりとこの関数が返す値はたったひとつ新しい画像の ID 番号だけだと
        記されているからです。 実は<acronym>GIMP</acronym>の関数はたとえ返し
        値がひとつだけであっても必ずこれをリストにして返します。 ですからその
        リストの先頭を引き出してやる必要があるのです。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Adding A New Layer To The Image</title>
      <title lang="ja">画像に新しいレイヤーを追加</title>
      <para lang="en">
        Now that we have an image, we need to add a layer to it. We'll
        call the <function>gimp-layer-new</function> function to create the
        layer, passing
        in the ID of the image we just created. (From now on, instead
        of listing the complete function, we'll only list the lines
        we're adding to it. You can see the complete script 
        <link linkend="gimp-using-script-fu-tutorial-result">here</link>.)
        Because we've declared all of the local variables we'll use,
        we'll also close the parentheses marking the end of our
        variable declarations:
      </para>
      <para lang="ja">
        画像ができたのでこんどはレイヤーを追加する必要があります。 
        <function>gimp-layer-new</function> 関数を呼び出して先程作った画像の
        ID 番号を渡し、 レイヤーを生成させます。 (ここからの説明では関数の
        中身を全部ここに掲載する代わりに、 追加される行だけを載せます。 
        最終的なスクリプトの全貌はこの演習の 
        <link linkend="gimp-using-script-fu-tutorial-result">最後</link> で
        ご覧いただけます。) これで使う予定の局所変数は全て宣言し終えました
        ので、 変数宣言を示す括弧もここで閉じることにします。
      </para>
      <programlisting lang="en">
        ;create a new layer for the image:
           (theLayer
                     (car
                          (gimp-layer-new
                           theImage
                           theImageWidth
                           theImageHeight
                           RGB-IMAGE
                           "layer 1"
                           100
                           NORMAL
                          )
                      )
            )
         ) ;end of our local variables
      </programlisting>
      <programlisting lang="ja">
        ;create a new layer for the image: (新しい画像を作る局所変数を定義する)
           (theLayer
                     (car
                          (gimp-layer-new
                           theImage
                           theImageWidth
                           theImageHeight
                           RGB-IMAGE
                           "layer 1"
                           100
                           NORMAL
                          )
                      )
            )
         ) ;end of our local variables (局所変数の終わり)
      </programlisting>
      <para lang="en">
        Once we have the new layer, we need to add it to the image:
      </para>
      <para lang="ja">
        新しいレイヤーができたので画像に加えなくてはなりません。
      </para>
      <programlisting>
        (gimp-image-add-layer theImage theLayer 0)
      </programlisting>
      <para lang="en">
        Now, just for fun, let's see the fruits of our labors up until this
        point, and add this line to show the new, empty image:
      </para>
      <para lang="ja">
        さてここまでにスクリプトが実らせた果実の熟れ具合を見て楽しむために、
        つぎの行を追加して新しい空の画像を表示させましょう。
      </para>
      <programlisting>
        (gimp-display-new theImage)
      </programlisting>
      <para lang="en">
        Save your work, select
        <menuchoice>
          <guimenu>Filters</guimenu>
          <guisubmenu>Script-Fu</guisubmenu>
          <guimenuitem>Refresh Scripts</guimenuitem>
        </menuchoice>,
        run the script and a new image should pop up. It will probably
        contain garbage (random colors), because we haven't erased
        it. We'll get to that in a second.
      </para>
      <para lang="ja">
        以上の工作を保存します。 そのあと画像ウィンドウのメニューより 
        <menuchoice>
          <guimenu>フィルター</guimenu>
          <guisubmenu>Script-Fu</guisubmenu>
          <guimenuitem>スクリプトを再読み込み</guimenuitem>
        </menuchoice>
        させてから、 スクリプトを実行すると新しい画像が開かれるはずです。
        画像はゴミだらけ (不規則な色) になっているでしょう。 消去の処理を
        していないためです。 さああともう少しです。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Adding The Text</title>
      <title lang="ja">テキストを追加</title>
      <para lang="en">
        Go ahead and remove the line to display the image (or comment
        it out with a (<code>;</code>) as the first character of the line).
      </para>
      <para lang="en">
        Before we add text to the image, we need to set the background
        and foreground colors so that the text appears in the color
        the user specified. We'll use the
        gimp-context-set-back/foreground functions:
      </para>
      <para lang="ja">
        先に進みたいので先程画像を表示させるために追加した行を削除して
        ください。 (もしくはその行の最初にセミコロン
        <quote><code>;</code></quote>を書き加えてコメントアウトしてください。)
      </para>
      <para lang="ja">
        画像にテキストを加える前に、 画像の背景色と描画色を設定してテキスト
        が読み取れる色づかいに設定しなくてはなりません。 これには 
        <function>gimp-context-set-background</function> 関数と 
        <function>gimp-context-set-foreground</function> 関数を使いましょう。
      </para>
      <programlisting>
        (gimp-context-set-background '(255 255 255) )
        (gimp-context-set-foreground inTextColor)
      </programlisting>
      <para lang="en">
        With the colors properly set, let's now clean out the garbage
        currently in the image by filling the drawable with the background
        color:
      </para>
      <para lang="ja">
        色がうまく設定できたら、 描画対象を塗りつぶす方法で画像に溢れている
        ゴミを一掃しましょう。
      </para>
      <programlisting>
        (gimp-drawable-fill theLayer BACKGROUND-FILL)
      </programlisting>
      <para lang="en">
        With the image cleared, we're ready to add some text:
      </para>
      <para lang="ja">
        画像が清められたらつぎはテキストの追加にとりかかります。
      </para>
      <programlisting>
        (set! theText
                      (car
                           (gimp-text-fontname
                            theImage theLayer
                            0 0
                            inText
                            0
                            TRUE
                            inFontSize PIXELS
                            "Sans")
                       )
        )
      </programlisting>
      <para lang="en">
        Although a long function call, it's fairly straightforward if
        you go over the parameters while looking at the function's
        entry in the DB Browser. Basically, we're creating a new text
        layer and assigning it to the variable
        <varname>theText</varname>.
      </para>
      <para lang="en">
        Now that we have the text, we can grab its width and height and resize
        the image and the image's layer to the text's size:
      </para>
      <para lang="ja">
        長い関数呼び出しになっていますが、 プロシージャーデータベースの
        ブラウザーでそれぞれのパラメーターについて見てみればどの項目も
        ありきたりなものばかりです。 要するにここでは新しいテキストレイヤーを
        作成して変数 <varname>theText</varname> に代入しているのです。
      </para>
      <para lang="ja">
        さてテキストができましたので、 つぎはその幅と高さをつかめば画像と
        そのレイヤーの寸法をテキストの大きさに合わせられます。
      </para>
      <programlisting>
        (set! theImageWidth   (car (gimp-drawable-width  theText) ) )
        (set! theImageHeight  (car (gimp-drawable-height theText) ) )

        (gimp-image-resize theImage theImageWidth theImageHeight 0 0)

        (gimp-layer-resize theLayer theImageWidth theImageHeight 0 0)
      </programlisting>
      <para lang="en">
        If you're like me, you're probably wondering what a drawable is when
        compared to a layer. The difference between the two is that a drawable
        is anything that can be drawn into, including layers but also
        channels, layer masks, the selection, etc; a layer is a more specific
        version of a drawable. In most cases, the distinction is not
        important.
      </para>
      <para lang="en">
        With the image ready to go, we can now re-add our display line:
      </para>
      <para lang="ja">
        私もそうでしたが、 描画対象というのはレイヤーとどんな関係にあたるもの
        なのか疑問に思われたことでしょう。 両者の違いについては、 レイヤーや
        チャンネルやレイヤーマスクや選択範囲などなどあらゆる描画可能なものを
        描画対象と呼ぶということで説明できます。 レイヤーは特定の描画対象だと
        いえます。 ほとんどの場合その区別は重要ではありません。
      </para>
      <para lang="ja">
        画像の準備ができましたので、 また途中経過の表示の行を追加してもよい
        でしょう。
      </para>
      <programlisting>
        (gimp-display-new theImage)
      </programlisting>
      <para lang="en">
        Save your work, refresh the database and give your first script a run!
      </para>
      <para lang="ja">
        以上の工作を保存したらデータベースを読み込み直し、 できたばかりの
        <quote>はじめてのスクリプト</quote>を作動させてみましょう。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Clearing The Dirty Flag</title>
      <title lang="ja"><quote>手付き</quote>フラグを解消</title>
      <para lang="en">
        If you try to close the image created without first saving the file,
        <acronym>GIMP</acronym> will ask you if you want to save your work
        before you close the
        image. It asks this because the image is marked as dirty, or unsaved.
        In the case of our script, this is a nuisance for the times when we
        simply give it a test run and don't add or change anything in the
        resulting image &mdash; that is, our work is easily reproducible in
        such a simple script, so it makes sense to get rid of this dirty flag.
      </para>
      <para lang="en">
        To do this, we can clear the dirty flag after displaying the image:
      </para>
      <para lang="ja">
        でき上がった画像をファイルに保存せずに閉じようとすると、 
        <acronym>GIMP</acronym>は画像を閉じる前に保存しませんかと尋ねる
        はずです。 これは画像が<quote>手付き</quote>になっている、 すなわち
        保存されていないために起こります。 今回作ったスクリプトの場合は単に
        試しで画像化してあとは何も加工していないのに毎回こんな風に尋ねられたら
        面倒です。 しかも同じようなスクリプトならまたしても起こりうる
        事例なので、 ここは<quote>手付き</quote>フラグを消すことを考えてみます。
      </para>
      <para lang="ja">
        この目的のためには<quote>手付き</quote>フラグの解消を画像の表示後に
        行なえばよろしい。
      </para>
      <programlisting>
        (gimp-image-clean-all theImage)
      </programlisting>
      <para lang="en">
        This will set dirty count to 0, making it appear to be a
        <quote>clean</quote> image.
      </para>
      <para lang="en">
        Whether to add this line or not is a matter of personal taste. I use
        it in scripts that produce new images, where the results are trivial,
        as in this case. If your script is very complicated, or if it works on
        an existing image, you will probably not want to use this function.
      </para>
      <para lang="ja">
        この処理は手付きの回数を 0 にするので結果的に画像が
        <quote>手付きなし</quote>となります。
      </para>
      <para lang="ja">
        このような行を挿し挟むか否かは個人的な好みに委ねられます。 私なら
        新たな画像を作成するスクリプトの、 今回のようにありきたりの結果が出る
        場合に限ります。 しかしスクリプトがとても複雑だったり、 既存の画像を
        加工するものならば、 おそらくこういった機能を使いたい理由が
        ありません。
      </para>
    </sect3>
  </sect2>

  <sect2 id="gimp-using-script-fu-tutorial-extending-text-box">
    <title lang="en">Extending The Text Box Script</title>
    <title lang="ja">テキストボックススクリプトを拡張</title>
    <sect3>
      <title lang="en">Handling Undo Correctly</title>
      <title lang="ja">取り消し機能の正しい取扱い</title>
      <para lang="en">
        When creating a script, you want to give your users the ability to
        undo their actions, should they make a mistake. This is easily
        accomplished by calling the functions
        <function>gimp-undo-push-group-start</function>
        and <function>gimp-undo-push-group-end</function>
        around the code that manipulates the image. You can think of them as
        matched statements that let <acronym>GIMP</acronym> know when to start
        and stop recording manipulations on the image, so that those
        manipulations can later be undone.
      </para>
      <para lang="en">
        If you are creating a new image entirely, it doesn't make sense to use
        these functions because you're not changing an existing image.
        However, when you are changing an existing image, you most surely want
        to use these functions.
      </para>
      <para lang="en">
        Undoing a script works nearly flawlessly when using these functions.
      </para>
      <para lang="ja">
        スクリプトを作成すると、 取り消し機能をつけて失敗から戻れるように
        したくなります。 これは簡単で、 画像を操作するコードを 
        <function>gimp-undo-push-group-start</function> と
        <function>gimp-undo-push-group-end</function> の両関数で挟めば
        できます。 考え方としては画像上で行なわれる操作の記録を開始し終了する
        時点を<acronym>GIMP</acronym>に知らせて、 あとでその操作を取り消せる
        ようにしている対の式だと見て間違いありません。 
      </para>
      <para lang="ja">
        新しい画像を丸ごと生成するスクリプトならこの機能を使う意味が
        ありません。 なぜなら既存の画像を変更しているわけではないからです。
        しかし反対に既存の画像を変更するスクリプトならこの機能を使いたいのは
        当然です。
      </para>
      <para lang="ja">
        この両関数を使う限りスクリプトの動作の取り消しはほとんど完全無欠に
        行なえます。
      </para>
    </sect3>

    <sect3>
      <title lang="en">Extending The Script A Little More</title>
      <title lang="ja">もう少しスクリプトを拡張</title>
      <para lang="en">
        Now that we have a very handy-dandy script to create text
        boxes, let's add two features to it:
      </para>
      <para lang="ja">
        今やテキストボックスを作るとっても素敵便利な<footnote>
            <para>handy-dandy &supe; オテテミテテアテテゴッコ</para>
          </footnote>スクリプトができているので、 2 つの機能を追加して
        やりましょう。
      </para>
      <itemizedlist>
        <listitem>
          <para lang="en">
            Currently, the image is resized to fit exactly around the
            text &mdash; there's no room for anything, like drop shadows or
            special effects (even though many scripts will automatically
            resize the image as necessary). Let's add a buffer around
            the text, and even let the user specify how much buffer to
            add as a percentage of the size of the resultant text.
          </para>
          <para lang="ja">
            現在はテキストの周りをぴったり囲む大きさに画像が調節されます。 
            ドロップシャドウみたいな特殊効果がつけば他のスクリプトなら自動的
            に寸法を必要なだけ増やせるのに、 余地も調節機能も全くありません。
            そこでテキストまわりに余裕をもたせて、 しかもその幅をユーザーが
            テキストの結果的な大きさに対する比率で指定できるようにします。
          </para>
        </listitem>
        <listitem>
          <para lang="en">
            This script could easily be used in other scripts that work
            with text. Let's extend it so that it returns the image and
            the layers, so other scripts can call this script and use
            the image and layers we create.
          </para>
          <para lang="ja">
            このスクリプトはテキストを扱う他のスクリプトから簡単に利用される
            ようにもできます。 スクリプトが生成した画像やレイヤーを返すよう
            関数を改造し、 他のスクリプトがこのスクリプトを呼び出して生成
            させた画像やレイヤーを利用できるように拡張しましょう。
          </para>
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3>
      <title lang="en">
        Modifying The Parameters And The Registration Function
      </title>
      <title lang="ja">パラメーターと登録関数の変更</title>
      <para lang="en">
        To let the user specify the amount of buffer, we'll add a parameter to
        our function and the registration function:
      </para>
      <para lang="ja">
        テキスト周りの余裕を設定できるよう、 メイン関数にパラメーターを追加して
        登録関数を変更します。
      </para>
      <programlisting lang="en">
  (define (script-fu-text-box inTest inFont inFontSize inTextColor inBufferAmount)
  (let*
        (
           ; define our local variables
           ; create a new image:
           (theImageWidth  10)
           (theImageHeight 10)
           (theImage (car
                          (gimp-image-new
                           theImageWidth
                           theImageHeight
                           RGB
                          )
                     )
           )
           (theText)          ;a declaration for the text
                              ;we create later

           (theBuffer)        ;<emphasis>added</emphasis>

           (theLayer
                     (car
                         (gimp-layer-new
                          theImage
                          theImageWidth
                          theImageHeight
                          RGB-IMAGE
                          "layer 1"
                          100
                          NORMAL
                         )
                     )
           )
        ) ;end of our local variables

   <replaceable>[Code here]</replaceable>
 )
      </programlisting>
      <programlisting lang="ja">
  (define (script-fu-text-box inTest inFont inFontSize inTextColor inBufferAmount)
  (let*
        (
           ; define our local variables
           ; create a new image: (新しい画像を作る局所変数を定義する)
           (theImageWidth  10)
           (theImageHeight 10)
           (theImage (car
                          (gimp-image-new
                           theImageWidth
                           theImageHeight
                           RGB
                          )
                     )
           )
           (theText)          ;a declaration for the text (テキストの定義)
                              ;we create later (あとで作成するつもり)

           (theBuffer)        ;<emphasis>added</emphasis> (追加行)

           (theLayer
                     (car
                         (gimp-layer-new
                          theImage
                          theImageWidth
                          theImageHeight
                          RGB-IMAGE
                          "layer 1"
                          100
                          NORMAL
                         )
                     )
           )
        ) ;end of our local variables

   <replaceable>[Code here]</replaceable> (ここに中身のコードを書く)\n
 )
      </programlisting>
      <programlisting><![CDATA[
  (script-fu-register
    "script-fu-text-box"                        ;func name
    "Text Box"                                  ;menu label
    "Creates a simple text box, sized to fit\
      around the user's choice of text,\
      font, font size, and color."              ;description
    "Michael Terry"                             ;author
    "copyright 1997, Michael Terry;\
      2009, the GIMP Documentation Team"        ;copyright notice
    "October 27, 1997"                          ;date created
    ""                     ;image type that the script works on
    SF-STRING      "Text"          "Text Box"   ;a string variable
    SF-FONT        "Font"          "Charter"    ;a font variable
    SF-ADJUSTMENT  "Font size"     '(50 1 1000 1 10 0 1)
                                                ;a spin-button
    SF-COLOR       "Color"         '(0 0 0)     ;color variable
    SF-ADJUSTMENT  "Buffer amount" '(35 0 100 1 10 1 0)
                                                ;a slider
  )
  (script-fu-menu-register "script-fu-text-box" "<Image>/Font/Create/Text")
      ]]></programlisting>
    </sect3>

    <sect3>
      <title lang="en">Adding The New Code</title>
      <title lang="ja">新しいコードの追加</title>
      <para lang="en">
        We're going to add code in two places: right before we resize
        the image, and at the end of the script (to return the new
        image, the layer and the text).
      </para>
      <para lang="en">
        After we get the text's height and width, we need to resize
        these values based on the buffer amount specified by the
        user. We won't do any error checking to make sure it's in the
        range of 0-100% because it's not life-threatening, and because
        there's no reason why the user can't enter a value like "200"
        as the percent of buffer to add.
      </para>
      <para lang="ja">
        画像の寸法を変更する前と、 スクリプトの最後の2箇所にコードを追加して
        ゆきます。 後者はできたばかりの新しい画像とそのレイヤーとテキストを
        返すためのコードです。
      </para>
      <para lang="ja">
        テキストの高さと幅が判ったら、 ユーザーが指定したテキスト周りの余裕の
        量 (<varname>inBufferAmount</varname>) に基づいてその大きさを
        変更します。 入力された値が正しく 0% から 100% までの範囲に収まって
        いるかどうか確かめるエラーチェックについては、 何が起きても深刻には
        なりえず、 また余裕の量に 200% などという法外な値をユーザーに
        指定させまいとする理由も見当たらないことから、 一切検査しません。
      </para>
      <programlisting>
        (set! theBuffer (* theImageHeight (/ inBufferAmount 100) ) )

        (set! theImageHeight (+ theImageHeight theBuffer theBuffer) )
        (set! theImageWidth  (+ theImageWidth  theBuffer theBuffer) )
      </programlisting>
      <para lang="en">
        All we're doing here is setting the buffer based on the height of the
        text, and adding it twice to both the height and width of our new
        image. (We add it twice to both dimensions because the buffer needs to
        be added to both sides of the text.)
      </para>
      <para lang="en">
        Now that we have resized the image to allow for a buffer, we
        need to center the text within the image. This is done by
        moving it to the (x, y) coordinates of (<varname>theBuffer</varname>,
        <varname>theBuffer</varname>). I added this line after
        resizing the layer and the image:
      </para>
      <para lang="ja">
        このコードが行なっているのはテキストの高さに基づいて余裕の量を算出
        し、 新たにできた画像の高さや幅にそれぞれ 2 度ずつ加えていること
        だけです。 縦にも横にも2度ずつ加算している理由は、 余裕の幅をテキスト
        の両側に加える必要があるからです。
      </para>
      <para lang="ja">
        画像の寸法が変更できて余裕の幅がとれるようになったので、 つぎは画像の
        中央にテキストを配置しなくてはなりません。 これは (x, y) 座標で表すと
        (<varname>theBuffer</varname>, <varname>theBuffer</varname>) の位置に
        テキストを移動すればよろしい。 この処理の行を画像とレイヤーのサイズ
        変更のあとに加えました。
      </para>
      <programlisting>
        (gimp-layer-set-offsets theText theBuffer theBuffer)
      </programlisting>
      <para lang="en">
        Go ahead and save your script, and try it out after refreshing the
        database.
      </para>
      <para lang="en">
        All that is left to do is return our image, the layer, and the text
        layer. After displaying the image, we add this line:
      </para>
      <para lang="ja">
        ここまでできたらスクリプトを保存して、 データベースを読み込み直して
        から試してみましょう。
      </para>
      <para lang="ja">
        もう残された課題は画像とレイヤーとテキストレイヤーの情報を返す処理
        だけです。
      </para>
      <programlisting>
        (list theImage theLayer theText)
      </programlisting>
      <para lang="en">
        This is the last line of the function, making this list available to
        other scripts that want to use it.
      </para>
      <para lang="en">
        To use our new text box script in another script, we could write
        something like the following:
      </para>
      <para lang="ja">
        これが関数の最後に置かれる行です。 これで他のスクリプトから利用できる
        ようになります。
      </para>
      <para lang="ja">
        他のスクリプトからテキストボックススクリプトを使う場合はつぎのような
        コードを書くことになります。
      </para>
      <programlisting>
        (set! theResult (script-fu-text-box
                         "Some text"
                         "Charter" "30"
                         '(0 0 0)
                         "35"
                        )
        )
        (gimp-image-flatten (car theResult))
      </programlisting>
      <para lang="en">
        Congratulations, you are on your way to your Black Belt of Script-Fu!
      </para>
      <para lang="ja">
        おめでとう。 あなたは Script-Fu の黒帯への道を進んでいますよ。
      </para>
    </sect3>
  </sect2>

  <sect2 id="gimp-using-script-fu-tutorial-result">
    <title lang="en">Your script and its working</title>
    <title lang="ja">スクリプト作品とその稼動の様子</title>
    <sect3>
      <title lang="en">What you write</title>
      <title lang="ja">書いた成果</title>
      <para lang="en">Below the complete script:</para>
      <para lang="ja">スクリプトの完全版はつぎのとおりです。</para>
      <programlisting><![CDATA[
  (script-fu-register
            "script-fu-text-box"                        ;func name
            "Text Box"                                  ;menu label
            "Creates a simple text box, sized to fit\
              around the user's choice of text,\
              font, font size, and color."              ;description
            "Michael Terry"                             ;author
            "copyright 1997, Michael Terry;\
              2009, the GIMP Documentation Team"        ;copyright notice
            "October 27, 1997"                          ;date created
            ""                     ;image type that the script works on
            SF-STRING      "Text"          "Text Box"   ;a string variable
            SF-FONT        "Font"          "Charter"    ;a font variable
            SF-ADJUSTMENT  "Font size"     '(50 1 1000 1 10 0 1)
                                                        ;a spin-button
            SF-COLOR       "Color"         '(0 0 0)     ;color variable
            SF-ADJUSTMENT  "Buffer amount" '(35 0 100 1 10 1 0)
                                                        ;a slider
  )
  (script-fu-menu-register "script-fu-text-box" "<Image>/File/Create/Text")
  (define (script-fu-text-box inText inFont inFontSize inTextColor inBufferAmount)
    (let*
      (
        ; define our local variables
        ; create a new image:
        (theImageWidth  10)
        (theImageHeight 10)
        (theImage)
        (theImage
                  (car
                      (gimp-image-new
                        theImageWidth
                        theImageHeight
                        RGB
                      )
                  )
        )
        (theText)             ;a declaration for the text
        (theBuffer)           ;create a new layer for the image
        (theLayer
                  (car
                      (gimp-layer-new
                        theImage
                        theImageWidth
                        theImageHeight
                        RGB-IMAGE
                        "layer 1"
                        100
                        NORMAL
                      )
                  )
        )
      ) ;end of our local variables
      (gimp-image-add-layer theImage theLayer 0)
      (gimp-context-set-background '(255 255 255) )
      (gimp-context-set-foreground inTextColor)
      (gimp-drawable-fill theLayer BACKGROUND-FILL)
      (set! theText
                    (car
                          (gimp-text-fontname
                          theImage theLayer
                          0 0
                          inText
                          0
                          TRUE
                          inFontSize PIXELS
                          "Sans")
                      )
        )
      (set! theImageWidth   (car (gimp-drawable-width  theText) ) )
      (set! theImageHeight  (car (gimp-drawable-height theText) ) )
      (set! theBuffer (* theImageHeight (/ inBufferAmount 100) ) )
      (set! theImageHeight (+ theImageHeight theBuffer theBuffer) )
      (set! theImageWidth  (+ theImageWidth  theBuffer theBuffer) )
      (gimp-image-resize theImage theImageWidth theImageHeight 0 0)
      (gimp-layer-resize theLayer theImageWidth theImageHeight 0 0)
      (gimp-layer-set-offsets theText theBuffer theBuffer)
      (gimp-display-new theImage)
      (list theImage theLayer theText)
    )
  )
      ]]></programlisting>
    </sect3>

    <sect3>
      <title lang="en">What you obtain</title>
      <title lang="ja">得られるもの</title>
      <figure>
        <title lang="en">And the result on the screen.</title>
        <title lang="ja">画面にはこんな成果が現れます。</title>
        <mediaobject>
          <imageobject>
            <imagedata format="PNG"
              fileref="images/using/script-fu-screen.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect3>
  </sect2>
</sect1>
